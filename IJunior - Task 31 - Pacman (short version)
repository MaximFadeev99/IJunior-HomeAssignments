using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace CSTest2
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Random random = new Random();
            List<int> directionKeysNumbers = new List<int> {39, 38, 40, 39, 37, 38, 40, 39, 37, 39};
            int playerDirectionChangeX = 0;
            int playerDirectionChangeY = 0;
            int collectedPoints = 0;
            int enemyDirectionChangeX = 0;
            int enemyDirectionChangeY = -1;
            string filePath = "map1";
            char[,] currentMap = ReadMap(filePath, out int playerPositionX, out int playerPositionY, out int totalPoints, out int enemyPositionX,
                out int enemyPositionY);
            bool isPlaying = true;
            char mapWallsSymbol = '#';
            char playerSymbol = '@';
            char enemySymbol = 'G';
            int pressedKeyNumber;
            Console.CursorVisible = false;

            DrawMap(currentMap);

            while (isPlaying == true)
            {
                Console.SetCursorPosition(0, 20);
                Console.Write($"Собрано {collectedPoints} из {totalPoints}");

                if (Console.KeyAvailable == true)
                {
                    ConsoleKeyInfo pressedKey = Console.ReadKey(true);
                    pressedKeyNumber = (int)pressedKey.Key;
                    ChangeDirection(pressedKeyNumber, ref playerDirectionChangeX, ref playerDirectionChangeY);
                }

                Move(playerSymbol, currentMap, ref playerPositionX, ref playerPositionY, playerDirectionChangeX, playerDirectionChangeY);
                VerifyPositions(playerPositionX, playerPositionY, enemyPositionX, enemyPositionY);
                collectedPoints = CollectPoints(currentMap, playerPositionX, playerPositionY, collectedPoints);

                while (currentMap[enemyPositionX + enemyDirectionChangeX, enemyPositionY + enemyDirectionChangeY] == mapWallsSymbol)
                {
                    pressedKeyNumber = directionKeysNumbers.ElementAt(random.Next(0, directionKeysNumbers.Count - 1));
                    ChangeDirection(pressedKeyNumber, ref enemyDirectionChangeX, ref enemyDirectionChangeY);
                }
                
                Move(enemySymbol, currentMap, ref enemyPositionX, ref enemyPositionY, enemyDirectionChangeX, enemyDirectionChangeY);
                VerifyPositions(playerPositionX, playerPositionY, enemyPositionX, enemyPositionY);

                if (collectedPoints == totalPoints)
                {
                    isPlaying = false;
                    Console.SetCursorPosition(0, 19);
                    Console.WriteLine("Вы победили!");
                    Console.ReadKey();
                }
            }
        }

        static char[,] ReadMap(string filePath, out int playerPositionX, out int playerPositionY, out int totalPoints,
            out int enemyPositionX, out int enemyPositionY)
        {
            const char PlayerSymbol = '@';
            const char EnemySymbol = 'G';
            const char EmptySpace = ' ';
            const char InitialWallSymbol = '&';

            string[] mapFile = File.ReadAllLines($"Maps/{filePath}.txt");
            char[,] map = new char[mapFile.Length, mapFile[0].Length];
            char mapWallsSymbol = '#';
            char pointSymbol = '.';

            playerPositionX = 0;
            playerPositionY = 0;
            enemyPositionX = 0;
            enemyPositionY = 0;
            totalPoints = 0;

            for (int i = 0; i < mapFile.Length; i++)
            {
                for (int j = 0; j < mapFile[0].Length; j++)
                {
                    map[i, j] = mapFile[i][j];

                    switch (map[i, j])
                    {
                        case PlayerSymbol:
                            playerPositionX = i;
                            playerPositionY = j;
                            map[i, j] = pointSymbol;
                            totalPoints++;
                            break;

                        case EnemySymbol:
                            enemyPositionX = i;
                            enemyPositionY = j;
                            map[i, j] = pointSymbol;
                            totalPoints++;
                            break;

                        case EmptySpace:
                            map[i, j] = pointSymbol;
                            totalPoints++;
                            break;

                        case InitialWallSymbol:
                            map[i, j] = mapWallsSymbol;
                            break;
                    }
                }
            }

            return map;
        }

        static void DrawMap(char[,] map)
        {
            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    Console.Write(map[i, j]);
                }

                Console.WriteLine();
            }
        }

        static void ChangeDirection(int pressedKeyNumber, ref int directionChangeX, ref int directionChangeY)
        {
            const int UpArrowKeyNumber = 38;
            const int DownArrowKeyNumber = 40;
            const int RightArrowKeyNumber = 39;
            const int LeftArrowKeyNumber = 37;

            switch (pressedKeyNumber)
            {
                case UpArrowKeyNumber:
                    directionChangeX = -1;
                    directionChangeY = 0;
                    break;

                case DownArrowKeyNumber:
                    directionChangeX = 1;
                    directionChangeY = 0;
                    break;

                case RightArrowKeyNumber:
                    directionChangeX = 0;
                    directionChangeY = 1;
                    break;

                case LeftArrowKeyNumber:
                    directionChangeX = 0;
                    directionChangeY = -1;
                    break;
            }
        }

        static void Move(char mainSymbol, char[,] currentMap, ref int currentPositionX, ref int currentPositionY,
            int directionChangeX, int directionChangeY)
        {
            char mapWallsSymbol = '#';

            if (currentMap[currentPositionX + directionChangeX, currentPositionY + directionChangeY] != mapWallsSymbol)
            {
                DrawSymbol(currentPositionX, currentPositionY, currentMap[currentPositionX, currentPositionY]);
                currentPositionX += directionChangeX;
                currentPositionY += directionChangeY;
                DrawSymbol(currentPositionX, currentPositionY, mainSymbol);
            }

            if (directionChangeX != 0)
            {
                System.Threading.Thread.Sleep(75);
            }
            else
            {
                System.Threading.Thread.Sleep(40);
            }
        }

        static int CollectPoints(char[,] currentMap, int playerPositionX, int playerPositionY, int collectedPoints, char pointSymbol = '.')
        {
            char emptySpace = ' ';

            if (currentMap[playerPositionX, playerPositionY] == pointSymbol)
            {
                collectedPoints++;
                currentMap[playerPositionX, playerPositionY] = emptySpace;
            }

            return collectedPoints;
        }

        static void VerifyPositions(int playerPositionX, int playerPositionY, int enemyPositionX, int enemyPositionY)
        {
            char graveSymbol = 'X';

            if (playerPositionX == enemyPositionX && playerPositionY == enemyPositionY)
            {
                DrawSymbol(playerPositionX, playerPositionY, graveSymbol);
                Console.SetCursorPosition(0, 19);
                Console.WriteLine("Вас съели!");
                Console.ReadKey();
                Environment.Exit(0);
            }
        }

        static void DrawSymbol(int coordinateX, int coordinateY, char symbol)
        {
            Console.SetCursorPosition(coordinateY, coordinateX);
            Console.Write(symbol);
        }
    }
}
    }
}
