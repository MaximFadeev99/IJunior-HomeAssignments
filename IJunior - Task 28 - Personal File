using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.ExceptionServices;
using System.Text;
using System.Threading.Tasks;

namespace CSTest2
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string CommandAdd = "1";
            const string CommandShowAll = "2";
            const string CommandDeleteEmployee = "3";
            const string CommandLastNameSearch = "4";
            const string CommandExit = "5";

            string[] employeeNames = { "Петров Михаил Юрьевич", "Русаков Дмитрий Павлович", "Сидоров Сергей Русланов"};
            string[] employeePositions = { "Водитель", "Охранник", "Грузчик" };
            string userInput;
            string commandsList = $"{CommandAdd} - добавить нового сотрудника\n" +
                $"{CommandShowAll} - показать список всех текущих сотрудников\n" +
                $"{CommandDeleteEmployee} - удалить досье сотрудника\n" +
                $"{CommandLastNameSearch} - поиск сотрудника по фамилии\n" +
                $"{CommandExit} - выйти";
            bool isLeaving = false;

            while (isLeaving == false)
            {
                Console.WriteLine("Добро пожаловать в систему управления кадрами!");
                Console.WriteLine();
                Console.WriteLine(commandsList);
                Console.WriteLine();
                Console.Write("Укажите команду:");
                userInput = Console.ReadLine();

                switch (userInput)
                {
                    case CommandAdd:
                        AddEmployee(ref employeeNames, ref employeePositions);
                        break;

                    case CommandShowAll:
                        ShowAll(ref employeeNames, ref employeePositions);
                        break;

                    case CommandDeleteEmployee:
                        DeleteEmployee(ref employeeNames, ref employeePositions);
                        break;

                    case CommandLastNameSearch:
                        bool isFound = false;
                        int targetRow = 0;
                        LastNameSearch (ref employeeNames, ref employeePositions, ref isFound, out targetRow);
                        break;

                    case CommandExit:
                        isLeaving = true;
                        break;
                }

                Console.ReadKey();
                Console.Clear();
            }
        }

        static void AddEmployee(ref string[] employeeNames, ref string[] employeePositions)
        {
            string[] tempEmployeeNames = new string[employeeNames.Length + 1];
            string[] tempEmployeePositions = new string[employeeNames.Length + 1];
            string name;
            string position;

            Console.WriteLine();
            Console.Write("Укажите ФИО нового сотрудника:");
            name = Console.ReadLine();
            Console.Write("Укажите должность нового струдника:");
            position = Console.ReadLine();

            for (int i = 0; i < employeeNames.Length; i++)
            {
                tempEmployeeNames[i] = employeeNames[i];
                tempEmployeePositions[i] = employeePositions[i];
            }

            tempEmployeeNames[tempEmployeeNames.Length - 1] = name;
            tempEmployeePositions[tempEmployeePositions.Length - 1] = position;
            employeeNames = tempEmployeeNames;
            employeePositions = tempEmployeePositions;
            Console.Write("Новый сотрудник успешно добавлен!");
        }   

        static void ShowAll(ref string[] employeeNames, ref string[] employeePoistions)
        {
            Console.WriteLine();

            for (int i = 0; i < employeeNames.Length; i++)
            {
                Console.WriteLine(i + 1 + ") " + employeeNames[i] + " - " + employeePoistions[i]);
            }
        }

        static int LastNameSearch(ref string[] employeeNames, ref string[] employeePositions, ref bool isFound, out int targetRow)
        {
            string name;
            isFound = false;
            targetRow = 0;

            Console.WriteLine();
            Console.Write("Укажите фамилию для поиска сотрудника:");
            name = Console.ReadLine().ToLower();

            for (int i = 0; i < employeeNames.Length; i++) 
            {
                if (employeeNames[i].Split(' ')[0].ToLower() == name) 
                {
                    isFound = true;
                    targetRow = i;
                    break; 
                }
            }

            if (isFound == true)
            {
                Console.Write("Сотрудник найден: " + employeeNames[targetRow] + " - " + employeePositions[targetRow]);
            }
            else 
            {
                Console.Write("Сотрудник не найден.");
            }

            return targetRow;
        }

        static void DeleteEmployee(ref string[] employeeNames, ref string[] employeePositions)
        {
            bool isFound = false;
            int targetRow = 0;
            string userInput = "";
            int rowCount = 0;
            LastNameSearch(ref employeeNames, ref employeePositions, ref isFound, out targetRow);

            if (isFound == true)
            {
                while (userInput != "да" && userInput != "нет")
                {
                    Console.WriteLine();
                    Console.Write("Введите \"да\", чтобы удалить сотрудника, или \"нет\", чтобы отменить удаление:");
                    userInput = Console.ReadLine();
                }

                if (userInput == "да") 
                {
                    string[] tempEmployeeNames = new string[employeeNames.Length - 1];
                    string[] tempEmployeePositions = new string[employeeNames.Length - 1];

                    rowCount = 0;
                    for (int i = 0; i < employeeNames.Length; i++) 
                    {
                        if (i != targetRow) 
                        {
                            tempEmployeeNames[rowCount] = employeeNames[i];
                            tempEmployeePositions[rowCount] = employeePositions[i];
                            rowCount++;
                        }
                    }

                    employeeNames = tempEmployeeNames;
                    employeePositions = tempEmployeePositions;
                    Console.Write("Сотрудник удален.");
                }
            } 
        }
    }
}
