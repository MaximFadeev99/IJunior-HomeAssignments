using System;
using System.Collections.Generic;

namespace CSTest2
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Shop shop = new Shop();

            shop.Work();
        }
    }

    class Shop 
    {
        private Player _player = new Player();
        private Merchant _merchant = new Merchant();

        public void Work() 
        {
            const string CommandShowItems = "1";
            const string CommandBuy = "2";
            const string CommandShowPlayerInventory = "3";
            const string CommandLeave = "4";

            string playerInput;
            string commandOptions = $"\n{CommandShowItems} - \"покажи мне свои товары...\"" +
            $"\n{CommandBuy} - \"хочу кое-что прикупить...\"" +
            $"\n{CommandShowPlayerInventory} - посмотреть свой инвентарь..." +
            $"\n{CommandLeave} - \"извини, до следующего раза\"";
            bool isLeaving = false;

            while (isLeaving == false) 
            {
                ShowMoney();
                _merchant.IntroduceYourself();
                Console.WriteLine(commandOptions);

                do
                {
                    Console.Write("\nВыберите одно из действий выше: ");
                    playerInput = Console.ReadLine();
                }
                while (playerInput != CommandShowItems && playerInput != CommandBuy
                && playerInput != CommandLeave && playerInput != CommandShowPlayerInventory);

                switch (playerInput)               
                {
                    case CommandShowItems:
                        _merchant.ShowInventory(false);
                        Console.ReadKey();
                        break;

                    case CommandBuy:
                        StrikeDeal();
                        break;

                    case CommandShowPlayerInventory:
                        _player.ShowInventory(false);
                        Console.ReadKey();
                        break;

                    case CommandLeave:
                        isLeaving = true;
                        break;
                }

                Console.Clear();
            }       
        }

        private void ShowMoney() 
        {
            Console.SetCursorPosition(70, 0);
            Console.Write($"{_player.Name}: Денег в наличии {_player.Money}");
            Console.SetCursorPosition(70, 1);
            Console.WriteLine($"{_merchant.Name}: Денег в наличии {_merchant.Money}");
            Console.SetCursorPosition(0, 0);
        }

        private void StrikeDeal() 
        {
            Item requiredItem;
            int desiredAmount;
            int dueAmount;
            bool isAvailable;
            
            _merchant.ShowInventory(true);
            requiredItem = RequestItem(out int itemPosition);
            desiredAmount = RequestDesiredAmount();
            isAvailable = _merchant.CanConfirmAvailability(itemPosition, desiredAmount);

            if (isAvailable) 
            {
                dueAmount = desiredAmount * requiredItem.Price;

                if (_player.Money >= dueAmount)
                {
                    _player.AddItem(requiredItem, desiredAmount);
                    _merchant.RemoveItem(itemPosition, desiredAmount);
                }
                else 
                {
                    Console.WriteLine($"\n{_player.Name}:\"У меня недостаточно монет...\"");
                }
            }
            else 
            {
                Console.WriteLine($"\n{_merchant.Name}:\"Прошу прощения, но у меня нет столько...\"");
            }

            Console.ReadKey();
        }

        private Item RequestItem(out int itemPosition) 
        {
            int maxItems = _merchant.ReturnMaxItems();
            Item requiredItem;

            Console.Write($"\n{_merchant.Name}: \"Что именно вам нужно?\" (укажите номер) - ");

            while (int.TryParse(Console.ReadLine(), out itemPosition) == false || itemPosition < 1
                || itemPosition > maxItems)
            {
                Console.Write($"\n{_merchant.Name}: \"Не понял вас. Что именно вам нужно?\" (укажите номер) - ");
            }

            itemPosition -= 1;
            requiredItem = _merchant.ReturnItem(itemPosition);
            return requiredItem;
        }
        private int RequestDesiredAmount() 
        {
            int desiredQuantity;

            Console.Write($"\n{_merchant.Name}: \"Сколько вам нужно?\" - ");

            while (int.TryParse(Console.ReadLine(), out desiredQuantity) == false || desiredQuantity < 1)
            {
                Console.Write($"\n{_merchant.Name}: \"Не понял вас. Сколько вам нужно?\" - ");               
            }

            return desiredQuantity;
        }
    }

    abstract class Person
    {
        protected List<Stack> Stacks = new List<Stack>();

        public Person(string name, int money)
        {
            Name = name;
            Money = money;
        }

        public int Money { get; protected set; }
        public string Name { get; private set; }

        public void ShowInventory(bool includePrices) 
        {
            int positionCount = 1;

            Console.WriteLine($"\n{Name}: \"У меня в наличии следующие предметы:\"");

            if (includePrices == false)
            {
                foreach (var stack in Stacks) 
                {
                    Console.WriteLine($"{positionCount}) {stack.ItemInside.Name} x {stack.ItemsCount} шт.");
                }
            }
            else 
            {
                foreach (var stack in Stacks)
                {
                    Console.WriteLine($"{positionCount}) {stack.ItemInside.Name} x {stack.ItemsCount} шт. по {stack.ItemInside.Price} монет");
                }
            }             
        }
    }

    class Player : Person
    {
        public Player() : base("Игрок", 1200) { }

        public void AddItem(Item targetItem, int amount) 
        {
            bool isFound = false;

            foreach (var stack in Stacks) 
            {
                if (stack.ItemInside.Name == targetItem.Name) 
                {
                    stack.AddAmount(amount);
                    isFound = true;
                }
            }

            if (isFound == false)
                Stacks.Add(new Stack(targetItem, amount));

            Money -= targetItem.Price * amount;
        }
    }

    class Merchant : Person
    {
        public Merchant() : base("Торговец Джек", 2000) 
        {
            AddInitialItems();
        }

        public void IntroduceYourself()
        {
            Console.WriteLine($"{Name}: \"Добро пожаловать в наш магазин!\"");
            Console.WriteLine($"{Name}: \"Меня зовут {Name}.\"");
            Console.WriteLine($"{Name}: \"Чем я могу Вам помочь?\"");
        }

        public int ReturnMaxItems() 
        {
            return Stacks.Count;
        }

        public Item ReturnItem(int itemPosition) 
        {
            return Stacks[itemPosition].ItemInside;
        }

        public bool CanConfirmAvailability(int itemPosition, int desiredAmount) 
        {
            bool isAvailable;          

            if (Stacks[itemPosition].ItemsCount >= desiredAmount)
            {
                isAvailable = true;
            }
            else 
            {
                isAvailable= false;
            }

            return isAvailable;
        }

        public void RemoveItem(int targetItemPosition, int removedAmount) 
        {
            Stacks[targetItemPosition].RemoveAmount(removedAmount);
            Money += Stacks[targetItemPosition].ItemInside.Price * removedAmount;
        }

        private void AddInitialItems()
        {
            Stacks.Add(new Stack(new Item("Железная руда", 25), 20));
            Stacks.Add(new Stack(new Item("Зелье исцеления", 50), 10));
        }
    }

    class Stack
    {
        public Stack(Item itemName, int itemsCount)
        {
            ItemInside = itemName;
            ItemsCount = itemsCount;
        }

        public Item ItemInside { get; private set; }
        public int ItemsCount { get; private set; }

        public void AddAmount(int amount) 
        {
            if (amount < 0) 
                amount = 0;

            ItemsCount += amount;
        }

        public void RemoveAmount(int amount)
        {
            if (amount < 0)
                amount = 0;

            ItemsCount -= amount;
        }
    }

    class Item
    {
        public Item(string name, int price)
        {
            Name = name;
            Price = price;
        }

        public string Name { get; private set; }
        public int Price { get; private set; }
    }
}
