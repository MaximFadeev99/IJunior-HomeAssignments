using System;
using System.Collections.Generic;

namespace CSTest2
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Player player1 = new Player("Игрок1");
            Shop universalStore = new Shop();
         
            universalStore.Work(player1);
        }
    }

    class Shop 
    {
        public const string CommandShowItems = "1";
        public const string CommandBuy = "2";
        public const string CommandLeave = "4";

        private Merchant _merchant = new Merchant();
        
        public void Work(Player player) 
        {
            bool isLeaving = false;

            while (isLeaving == false)
            {
                Console.SetCursorPosition(70, 0);
                Console.Write($"{player.Name}: Денег в наличии {player.Money}");
                Console.SetCursorPosition(70, 1);
                Console.WriteLine($"{_merchant.Name}: Денег в наличии {_merchant.Money}");
                Console.SetCursorPosition(0, 0);
                _merchant.IntroduceYearself();


                switch (player.DefineNextAction())
                {
                    case CommandShowItems:
                        _merchant.ShowInventory();
                        Console.ReadKey();
                        break;

                    case CommandBuy:
                        BuyItem(player);
                        break;

                    case Player.CommandShowInventory:
                        player.ShowInventory();
                        Console.ReadKey();
                        break;

                    case CommandLeave:
                        isLeaving = true;
                        break;
                }

                Console.Clear();
            }
        }

        private void BuyItem(Player player) 
        {
            Dictionary <string,int> availableItems = _merchant.ShowInventory();
            bool isEnoughMoney = false;
            int priceForItem = 0;

            _merchant.ShowSalePrices();
            player.EnquireDesiredItem(availableItems, out Item desiredItem, out int desiredQuantity);

            if (desiredItem is IronOre)
            {
                priceForItem = _merchant.IronOreSalePrice;
                isEnoughMoney = player.IsEnoughMoney(priceForItem, desiredQuantity);
            }
            else if (desiredItem is HealingPotion) 
            {
                priceForItem = _merchant.HealingPotionSalePrice;
                isEnoughMoney = player.IsEnoughMoney(priceForItem, desiredQuantity);
            }

            if (isEnoughMoney == true)
            {
                if (_merchant.TryRemoveItem(desiredItem, desiredQuantity) == true)
                {
                    player.AddItem(desiredItem, desiredQuantity);
                    player.DeductMoney(priceForItem * desiredQuantity);
                    _merchant.AddMoney(priceForItem * desiredQuantity);
                    Console.WriteLine($"\n{_merchant.Name}: \"Приятно иметь с Вами дело!\"");
                }
                else
                {
                    Console.WriteLine($"\n{_merchant.Name}: \"У меня не хватает товара!\"");
                }
            }
            else 
            {
                Console.WriteLine($"\n{player.Name}: \"У меня не хватает денег!\"");
            }

            Console.ReadKey();
        }
    }
    
    class Player : Person 
    {
        public const string CommandShowInventory = "3";
        
        private string _commandOptions = $"\n{Shop.CommandShowItems} - \"покажи мне свои товары...\"" +
            $"\n{Shop.CommandBuy} - \"хочу кое-что прикупить...\"" +
            $"\n{CommandShowInventory} - посмотреть свой инвентарь..." +
            $"\n{Shop.CommandLeave} - \"извини, до следующего раза\"";

        public Player(string name) : base(name, 500) { }

        public string DefineNextAction ()
        {
            string playerInput;
            
            Console.WriteLine(_commandOptions);
            
            do
            {
                Console.Write("\nВыберите одно из действий выше:");
                playerInput = Console.ReadLine();
            } while (playerInput != Shop.CommandShowItems && playerInput != Shop.CommandBuy && playerInput != Shop.CommandLeave && playerInput != Player.CommandShowInventory);

            return playerInput;
        }

        public void EnquireDesiredItem(Dictionary<string, int> availableItems, out Item desiredItem, out int desiredQuantity) 
        {
            int itemNumber;
            desiredItem = null;
            int ironOreCode = 1; 
            int healingPotionCode = 2;

            Console.Write("Введите номер товара: ");

            while (int.TryParse(Console.ReadLine(), out itemNumber) == false || itemNumber <= 0 || itemNumber > availableItems.Count) 
            {
                Console.Write("Введите номер товара: ");
            }

            Console.Write("Введите желаемое количество: ");

            while (int.TryParse(Console.ReadLine(), out desiredQuantity) == false || desiredQuantity <= 0)
            {
                Console.Write("Введите желаемое количество: ");
            }

            if (itemNumber == ironOreCode)
            {
                desiredItem = new IronOre();
            }
            else if (itemNumber == healingPotionCode) 
            {
                desiredItem = new HealingPotion();
            }
        }
    }

    class Merchant : Person
    {
        private int _initialIronOreAmount = 20;
        private int _initialHealingPostionsAmount = 10;

        public Merchant() : base("Торговец Джек", 1000) 
        {
            _bag.AddInitialItems(_initialIronOreAmount, _initialHealingPostionsAmount);
        }

        public int IronOreSalePrice { get; private set; } = 25;
        public int HealingPotionSalePrice { get; private set; } = 50;

        public void IntroduceYearself() 
        {
            Console.WriteLine($"{Name}: \"Добро пожаловать в наш Магазин!\"");
            Console.WriteLine($"{Name}: \"Меня зовут {Name}.\"");
            Console.WriteLine($"{Name}: \"Чем я могу Вам помочь?\"");
        }

        public void ShowSalePrices()
        {           
            Console.WriteLine($"\n{Name}: \"Мы продаем железную руду по {IronOreSalePrice} золотых монет\"");
            Console.WriteLine($"{Name}: \"А исцеляющие зелья по {HealingPotionSalePrice} золотых монет\"");
        }
    }

    class Person 
    {
        protected Inventory _bag = new Inventory();

        public Person(string name, int initialMoney)
        {
            Name = name;
            Money = initialMoney;
        }

        public string Name { get; protected set; }
        public int Money { get; protected set; }

        public Dictionary<string, int> ShowInventory() 
        {
            Dictionary<string, int> countedItems = _bag.CountItems();
            int itemsCount = 1;

            Console.WriteLine($"\n{Name}: \"У меня в наличии следующие предметы:\"");

            foreach (var item in countedItems) 
            {
                Console.WriteLine(itemsCount +") " + item.Value + " x " + item.Key);
                itemsCount++;
            }

            return countedItems;
        }

        public bool IsEnoughMoney(int price, int desiredQuantity) 
        {
            bool isEnoughMoney;

            if (price * desiredQuantity > Money)
            {
                isEnoughMoney = false;
            }
            else 
            {
                isEnoughMoney= true;
            }
            
            return isEnoughMoney;
        }

        public void AddItem(Item addedItem, int addedAmount)
        {
            _bag.AddItem(addedItem, addedAmount);
        }

        public bool TryRemoveItem(Item addedItem, int addedAmount)
        {
            bool isSuccessful = _bag.TryRemoveItem(addedItem, addedAmount);

            if (isSuccessful == false) 
            {
                Console.WriteLine($"{Name}: \"У меня недостаточно товара!\"");
            }

            return isSuccessful;
        }

        public void AddMoney(int addedAmount) 
        {
            Money += addedAmount;
        }

        public void DeductMoney(int deductedAmount)
        {
            Money -= deductedAmount;
        }
    }  

    class Inventory
    {
        private List<Item> _items = new List<Item>();

        public void AddInitialItems(int ironOreAmmount, int healingPostionAmount)
        {
            IronOre ironOre = new IronOre();
            HealingPotion healingPotion = new HealingPotion();          

            for (int i = 1; i <= ironOreAmmount; i++)
            {
                _items.Add(ironOre);
            }

            for (int i = 1; i <= healingPostionAmount; i++)
            {
                _items.Add(healingPotion);
            }
        }

        public void AddItem(Item addedItem, int addedAmount)
        {
            for (int i = 1; i <= addedAmount; i++)
            {
                _items.Add(addedItem);
            }

            Console.WriteLine("Товар получен!");            
        }

        public bool TryRemoveItem(Item removedItem, int removedAmount)
        {
            int removedItemCount = 0;
            bool isSuccessful;
            int startPosition = 0;

            foreach (var item in _items)
            {
                if (item.Name == removedItem.Name)
                    removedItemCount++;
            }

            if (removedItemCount < removedAmount)
            {
                isSuccessful = false;               
            }
            else
            {
                do
                {
                    if (_items[startPosition].Name != removedItem.Name)
                    {
                        startPosition++;
                    }
                    else
                    {
                        _items.RemoveAt(startPosition);
                        removedAmount--;
                    }
                } while (removedAmount != 0);

                isSuccessful = true;
            }

            return isSuccessful;
        }

        public Dictionary<string, int> CountItems() 
        {
            Dictionary<string, int> countedItems= new Dictionary<string, int>();

            foreach (var item in _items)
            {
                if (countedItems.ContainsKey(item.Name) == false)
                {
                    countedItems.Add(item.Name, 1);
                }
                else 
                {
                    countedItems[item.Name]++;
                }
            }

            return countedItems;
        }
    }
   
    class Item
    {
        public Item(string name)
        {
            Name = name;
        }

        public string Name { get; private set; }
    }

    class IronOre : Item
    {
        public IronOre() : base("Железная руда") { }
    }

    class HealingPotion : Item
    {
        public HealingPotion() : base("Зельe исцеления") { }
    }
}
