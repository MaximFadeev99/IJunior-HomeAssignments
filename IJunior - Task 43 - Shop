using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace CSTest2
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Player player1 = new Player("Игрок1");
            Shop universalStore = new Shop();

            universalStore.Work(player1);

        }
    }

    class Shop
    {
        public const string CommandShowItems = "1";
        public const string CommandBuy = "2";
        public const string CommandShowPlayerInventory = "3";
        public const string CommandLeave = "4";

        private Merchant _merchant = new Merchant();

        public void Work(Player player)
        {
            bool isLeaving = false;

            while (isLeaving == false)
            {
                Console.SetCursorPosition(70, 0);
                Console.Write($"{player.Name}: Денег в наличии {player.Money}");
                Console.SetCursorPosition(70, 1);
                Console.WriteLine($"{_merchant.Name}: Денег в наличии {_merchant.Money}");
                Console.SetCursorPosition(0, 0);
                _merchant.IntroduceYourself();


                switch (player.DefineNextAction())
                {
                    case CommandShowItems:
                        _merchant.ShowInventory();
                        Console.ReadKey();
                        break;

                    case CommandBuy:
                        BuyItem(player);
                        break;

                    case Shop.CommandShowPlayerInventory:
                        player.ShowInventory();
                        Console.ReadKey();
                        break;

                    case CommandLeave:
                        isLeaving = true;
                        break;
                }

                Console.Clear();
            }
        }

        private void BuyItem(Player player)
        {
            List<Stack> availableItems = _merchant.ReturnInventory();
            bool isEnoughMoney = false;
            int priceForItem = 0;

            _merchant.ShowSalePrices();
            player.EnquireDesiredItem(availableItems, out Item desiredItem, out int desiredQuantity);

            if (desiredItem is IronOre)
            {
                priceForItem = _merchant.IronOreSalePrice;
                isEnoughMoney = player.IsEnoughMoney(priceForItem, desiredQuantity);
            }
            else if (desiredItem is HealingPotion)
            {
                priceForItem = _merchant.HealingPotionSalePrice;
                isEnoughMoney = player.IsEnoughMoney(priceForItem, desiredQuantity);
            }

            if (isEnoughMoney == true)
            {
                if (_merchant.TryRemoveItem(desiredItem, desiredQuantity) == true)
                {
                    player.AddItem(desiredItem, desiredQuantity);
                    player.Pay(priceForItem * desiredQuantity);
                    _merchant.AddMoney(priceForItem * desiredQuantity);
                    Console.WriteLine($"\n{_merchant.Name}: \"Приятно иметь с Вами дело!\"");
                }
                else
                {
                    Console.WriteLine($"\n{_merchant.Name}: \"У меня не хватает товара!\"");
                }
            }
            else
            {
                Console.WriteLine($"\n{player.Name}: \"У меня не хватает денег!\"");
            }

            Console.ReadKey();
        }
    }

    class Player : Person
    {
        public Player(string name) : base(name, 1100) { }

        public string DefineNextAction()
        {
            string playerInput;
            string _commandOptions = $"\n{Shop.CommandShowItems} - \"покажи мне свои товары...\"" +
            $"\n{Shop.CommandBuy} - \"хочу кое-что прикупить...\"" +
            $"\n{Shop.CommandShowPlayerInventory} - посмотреть свой инвентарь..." +
            $"\n{Shop.CommandLeave} - \"извини, до следующего раза\"";


        Console.WriteLine(_commandOptions);

            do
            {
                Console.Write("\nВыберите одно из действий выше: ");
                playerInput = Console.ReadLine();
            }
            while (playerInput != Shop.CommandShowItems && playerInput != Shop.CommandBuy
            && playerInput != Shop.CommandLeave && playerInput != Shop.CommandShowPlayerInventory);

            return playerInput;
        }

        public void EnquireDesiredItem(List<Stack> availableItems, out Item desiredItem, out int desiredQuantity)
        {
            int itemNumber;

            Console.Write("Введите номер товара: ");

            while (int.TryParse(Console.ReadLine(), out itemNumber) == false || itemNumber <= 0
                || itemNumber > availableItems.Count)
            {
                Console.Write("Введите номер товара: ");
            }

            desiredItem = availableItems.ElementAt(itemNumber - 1).ItemInside;
            Console.Write("Введите желаемое количество: ");

            while (int.TryParse(Console.ReadLine(), out desiredQuantity) == false || desiredQuantity <= 0)
            {
                Console.Write("Введите желаемое количество: ");
            }
        }


    }

    class Merchant : Person
    {
        private int _initialIronOreAmount = 20;
        private int _initialHealingPositionsAmount = 10;

        public Merchant() : base("Торговец Джек", 1500)
        {
            Inventory.AddNewItem(new IronOre(), _initialIronOreAmount);
            Inventory.AddNewItem(new HealingPotion(), _initialHealingPositionsAmount);
        }

        public void IntroduceYourself()
        {
            Console.WriteLine($"{Name}: \"Добро пожаловать в наш магазин!\"");
            Console.WriteLine($"{Name}: \"Меня зовут {Name}.\"");
            Console.WriteLine($"{Name}: \"Чем я могу Вам помочь?\"");
        }

        public void ShowSalesPrices() 
        {
            int itemsCount = 1;

            foreach (var stack in Inventory.ReturnStacks())
            {
                Console.WriteLine($"{itemsCount}) {stack.ItemInside.Name} по {stack.ItemInside.Price} золотых монет");
                itemsCount++;
            }
        }

        public List<Stack> ReturnInventory() 
        {
            return Inventory.ReturnStacks();
        }
       
    }

    class Person
    {
        protected Inventory Inventory = new Inventory();

        public Person(string name, int initialMoney)
        {
            Name = name;
            Money = initialMoney;
        }

        public string Name { get; protected set; }
        public int Money { get; protected set; }

        public void ShowInventory()
        {
            Console.WriteLine($"\n{Name}: \"У меня в наличии следующие предметы:\"");
            Inventory.ShowStacks();
        }

        public bool IsEnoughMoney(int price, int desiredQuantity)
        {
            bool isEnoughMoney;

            if (price * desiredQuantity > Money)
            {
                isEnoughMoney = false;
            }
            else
            {
                isEnoughMoney = true;
            }

            return isEnoughMoney;
        }

        public void AddItem(Item addedItem, int addedAmount)
        {
            Inventory.AddItem(addedItem, addedAmount);
        }

        public bool TryRemoveItem(Item addedItem, int addedAmount)
        {
            bool isSuccessful = Inventory.TryRemoveItem(addedItem, addedAmount);

            return isSuccessful;
        }

        public void AddMoney(int addedAmount)
        {
            Money += addedAmount;
        }

        public void Pay(int deductedAmount)
        {
            Money -= deductedAmount;
        }
    }

    class Inventory
    {
        private List<Stack> _stacks = new List<Stack>();

        public void AddNewItem(Item newItem, int quantity)
        {
            _stacks.Add(new Stack(newItem, quantity));
        }

        public void AddItem(Item addedItem, int addedAmount)
        {
            int existingPosition = 0;
            bool isSuccessful = false;

            foreach (var stack in _stacks)
            {
                if (stack.ItemInside.Name == addedItem.Name)
                {
                    existingPosition = _stacks.IndexOf(stack);
                    isSuccessful = true;
                    break;
                }
            }

            if (isSuccessful == true)
            {
                _stacks.ElementAt(existingPosition).ChangeItemsCount(addedAmount);
            }
            else
            {
                AddNewItem(addedItem, addedAmount);
            }

            Console.WriteLine("Товар получен!");
        }

        public bool TryRemoveItem(Item removedItem, int removedAmount)
        {
            bool isSuccessful = false;

            foreach (var stack in _stacks)
            {
                if (stack.ItemInside.Name == removedItem.Name && stack.ItemsCount >= removedAmount)
                {
                    stack.ChangeItemsCount(-removedAmount);
                    isSuccessful = true;
                    break;
                }
            }

            return isSuccessful;
        }

        public void ShowStacks()
        {
            int itemsCount = 1;

            foreach (var stack in _stacks)
            {
                Console.WriteLine($"{itemsCount}) {stack.ItemInside.Name} x {stack.ItemsCount} шт.");
                itemsCount++;
            }
        }

        public List<Stack> ReturnStacks() 
        {
            return _stacks;
        }

    }   

    class Stack
    {
        public Stack(Item items, int itemsCount)
        {
            ItemInside = items;
            ItemsCount = itemsCount;
        }

        public Item ItemInside { get; private set; }
        public int ItemsCount { get; private set; }

        public void ChangeItemsCount(int change)
        {
            if (ItemsCount + change >= 0)
            {
                ItemsCount += change;
            }
        }
    }

    abstract class Item
    {
        public Item(string name, int price)
        {
            Name = name;
            Price = price;
        }

        public string Name { get; private set; }
        public int Price { get; private set; }
    }

    class IronOre : Item
    {
        public IronOre() : base("Железная руда", 25) { }
    }

    class HealingPotion : Item
    {
        public HealingPotion() : base("Зельe исцеления", 50) { }
    }
}
