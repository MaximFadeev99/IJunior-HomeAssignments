using System;
using System.Collections.Generic;

namespace CSTest2
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Player player = new Player("Игрок");

            player.Trade(player);
        }
    }

    class Player : Person
    {
        public Player(string name) : base(name, 1100) { }
                    
        public void AddItem(Item addedItem, int addedAmount)
        {
            Inventory.AddItem(addedItem, addedAmount);
            Money -= addedItem.Price * addedAmount;
        }

        public bool IsEnoughMoney(int price, int desiredQuantity)
        {          
            return price * desiredQuantity <= Money;
        }
    }

    class Merchant : Person
    {
        public Merchant() : base("Торговец Джек", 1500)
        {
            AddInitialItems();
        }

        public void IntroduceYourself()
        {
            Console.WriteLine($"{Name}: \"Добро пожаловать в наш магазин!\"");
            Console.WriteLine($"{Name}: \"Меня зовут {Name}.\"");
            Console.WriteLine($"{Name}: \"Чем я могу Вам помочь?\"");
        }
     
        public bool RemoveItem(Item removedItem, int removedQuantity)
        {
            bool isSuccessful = Inventory.RemoveItem(removedItem, removedQuantity);

            if (isSuccessful == true) 
                Money += removedItem.Price * removedQuantity;

            return isSuccessful;
        }

        private void AddInitialItems()
        {
            string ironOre = "Железная руда";
            string healingPotion = "Исцеляющее зелье";
            int initialIronOreAmount = 20;
            int initialHealingPositionsAmount = 20;
            int ironOrePrice = 25;
            int healingPotionPrice = 50;

            Inventory.AddNewItem(new Item(ironOre, ironOrePrice), initialIronOreAmount);
            Inventory.AddNewItem(new Item(healingPotion, healingPotionPrice), initialHealingPositionsAmount);
        }
    }

    class Person
    {
        protected Inventory Inventory = new Inventory();
        const string CommandShowItems = "1";
        const string CommandBuy = "2";
        const string CommandShowPlayerInventory = "3";
        const string CommandLeave = "4";

        public Person(string name, int initialMoney)
        {
            Name = name;
            Money = initialMoney;
        }

        public string Name { get; protected set; }
        public int Money { get; protected set; }

        public void ShowInventory()
        {
            bool showPrices = false;

            Console.WriteLine($"\n{Name}: \"У меня в наличии следующие предметы:\"");
            Inventory.ShowStacks(showPrices);
        }

        public void Trade(Player player) 
        {           
            Merchant merchant = new Merchant();
            bool isLeaving = false;

            while (isLeaving == false)
            {
                Console.SetCursorPosition(70, 0);
                Console.Write($"{player.Name}: Денег в наличии {player.Money}");
                Console.SetCursorPosition(70, 1);
                Console.WriteLine($"{merchant.Name}: Денег в наличии {merchant.Money}");
                Console.SetCursorPosition(0, 0);
                merchant.IntroduceYourself();

                switch (player.DefineNextAction())
                {
                    case CommandShowItems:
                        merchant.ShowInventory();
                        Console.ReadKey();
                        break;

                    case CommandBuy:
                        merchant.Inventory.StrikeDeal(player, merchant);
                        break;

                    case CommandShowPlayerInventory:
                        player.ShowInventory();
                        Console.ReadKey();
                        break;

                    case CommandLeave:
                        isLeaving = true;
                        break;
                }

                Console.Clear();
            }
        }

        public string DefineNextAction()
        {
            string playerInput;
            string _commandOptions = $"\n{CommandShowItems} - \"покажи мне свои товары...\"" +
            $"\n{CommandBuy} - \"хочу кое-что прикупить...\"" +
            $"\n{CommandShowPlayerInventory} - посмотреть свой инвентарь..." +
            $"\n{CommandLeave} - \"извини, до следующего раза\"";

            Console.WriteLine(_commandOptions);

            do
            {
                Console.Write("\nВыберите одно из действий выше: ");
                playerInput = Console.ReadLine();
            }
            while (playerInput != CommandShowItems && playerInput != CommandBuy
            && playerInput != CommandLeave && playerInput != CommandShowPlayerInventory);

            return playerInput;
        }
    }

    class Inventory
    {
        private List<Stack> _stacks = new List<Stack>();

        public void AddNewItem(Item newItem, int quantity)
        {
            _stacks.Add(new Stack(newItem, quantity));
        }

        public void StrikeDeal(Player player, Merchant merchant)
        {
            bool showPrices = true; 

            ShowStacks(showPrices);
            EnquireDesiredItem(out Item desiredItem, out int desiredQuantity);

            if (player.IsEnoughMoney(desiredItem.Price, desiredQuantity) == true)
            {
                if (merchant.RemoveItem(desiredItem, desiredQuantity) == true)
                {
                    player.AddItem(desiredItem, desiredQuantity);
                    Console.WriteLine($"\n{merchant.Name}: \"Приятно иметь с Вами дело!\"");
                }
                else 
                {
                    Console.Write($"{merchant.Name}\"У меня не хватает товара!\"");
                }               
            }
            else
            {
                Console.WriteLine($"\n{player.Name}: \"У меня не хватает денег!\"");
            }

            Console.ReadKey();
        }

        public void AddItem(Item addedItem, int addedAmount)
        {
            int existingPosition = 0;
            bool isSuccessful = false;

            foreach (var stack in _stacks)
            {
                if (stack.ItemName.Name == addedItem.Name)
                {
                    existingPosition = _stacks.IndexOf(stack);
                    isSuccessful = true;
                    break;
                }
            }

            if (isSuccessful == true)
            {
                _stacks[existingPosition].AddAmount(addedAmount);
            }
            else
            {
                AddNewItem(addedItem, addedAmount);
            }

            Console.WriteLine("Товар получен!");
        }

        public bool RemoveItem(Item removedItem, int removedAmount)
        {
            bool isSuccessful = false;

            foreach (var stack in _stacks)
            {
                if (stack.ItemName.Name == removedItem.Name && stack.ItemsCount >= removedAmount)
                {
                    stack.ReduceAmount(removedAmount);
                    isSuccessful = true;
                    break;
                }
            }

            return isSuccessful;
        }        

        public void ShowStacks(bool showPrices)
        {
            int itemsCount = 1;
            Console.WriteLine();

            foreach (var stack in _stacks)
            {
                if (showPrices == true)
                {
                    Console.WriteLine($"{itemsCount}) {stack.ItemName.Name} x {stack.ItemsCount} шт. по {stack.ItemName.Price} золотых монет");
                    itemsCount++;
                }
                else 
                {
                    Console.WriteLine($"{itemsCount}) {stack.ItemName.Name} x {stack.ItemsCount} шт.");
                    itemsCount++;
                }              
            }
        }

        private void EnquireDesiredItem(out Item desiredItem, out int desiredQuantity)
        {
            int itemNumber;

            Console.Write($"\"Что именно вам нужно?\" (укажите номер) - ");

            while (int.TryParse(Console.ReadLine(), out itemNumber) == false || itemNumber <= 0
                || itemNumber > _stacks.Count)
            {
                Console.Write($"\"Не понял вас. Что именно вам нужно?\" (укажите номер) - ");
            }

            desiredItem = _stacks[itemNumber - 1].ItemName;
            Console.Write($"\"Сколько вам нужно?\" - ");

            while (int.TryParse(Console.ReadLine(), out desiredQuantity) == false || desiredQuantity <= 0
                || desiredQuantity > _stacks[itemNumber - 1].ItemsCount)
            {
                if (desiredQuantity > _stacks[itemNumber - 1].ItemsCount)
                {
                    Console.Write($"\"У меня не хватает товара! Укажите меньшее количество\" - ");
                }
                else
                {
                    Console.Write($"\"Не понял вас. Сколько вам нужно?\" - ");
                }
            }
        }
    }

    class Stack
    {
        public Stack(Item itemName, int itemsCount)
        {
            ItemName = itemName;
            ItemsCount = itemsCount;
        }

        public Item ItemName { get; private set; }
        public int ItemsCount { get; private set; }

        public void AddAmount(int change)
        {
            if (change >= 0)
            {
                ItemsCount += change;
            }
        }

        public void ReduceAmount(int change)
        {
            if (change >= 0)
            {
                ItemsCount -= change;
            }
        }
    }

    class Item
    {
        public Item(string name, int price)
        {
            Name = name;
            Price = price;
        }

        public string Name { get; private set; }
        public int Price { get; private set; }
    }
}
