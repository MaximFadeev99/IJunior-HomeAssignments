using System;
using System.Collections.Generic;

namespace CSTest2
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Player player1 = new Player("Игрок1");
            Shop universalStore = new Shop();

            universalStore.Work(player1);
        }
    }

    class Shop
    {
        public const string CommandShowItems = "1";
        public const string CommandBuy = "2";
        public const string CommandShowPlayerInventory = "3";
        public const string CommandLeave = "4";

        private Merchant _merchant = new Merchant();

        public void Work(Player player)
        {
            bool isLeaving = false;

            while (isLeaving == false)
            {
                Console.SetCursorPosition(70, 0);
                Console.Write($"{player.Name}: Денег в наличии {player.Money}");
                Console.SetCursorPosition(70, 1);
                Console.WriteLine($"{_merchant.Name}: Денег в наличии {_merchant.Money}");
                Console.SetCursorPosition(0, 0);
                _merchant.IntroduceYourself();

                switch (player.DefineNextAction())
                {
                    case CommandShowItems:
                        _merchant.ShowInventory();
                        Console.ReadKey();
                        break;

                    case CommandBuy:
                        BuyItem(player);
                        break;

                    case Shop.CommandShowPlayerInventory:
                        player.ShowInventory();
                        Console.ReadKey();
                        break;

                    case CommandLeave:
                        isLeaving = true;
                        break;
                }

                Console.Clear();
            }
        }

        private void BuyItem(Player player)
        {
            _merchant.ShowSalesPrices();
            _merchant.EnquireDesiredItem(out Item desiredItem, out int desiredQuantity);
           
            if (player.IsEnoughMoney(desiredItem.Price, desiredQuantity) == true)
            {
                _merchant.RemoveItem(desiredItem, desiredQuantity);
                player.AddItem(desiredItem, desiredQuantity);
                player.Pay(desiredItem.Price * desiredQuantity);
                _merchant.AddMoney(desiredItem.Price * desiredQuantity);
                Console.WriteLine($"\n{_merchant.Name}: \"Приятно иметь с Вами дело!\"");               
            }
            else
            {
                Console.WriteLine($"\n{player.Name}: \"У меня не хватает денег!\"");
            }

            Console.ReadKey();
        }
    }

    class Player : Person
    {
        public Player(string name) : base(name, 1100) { }

        public string DefineNextAction()
        {
            string playerInput;
            string _commandOptions = $"\n{Shop.CommandShowItems} - \"покажи мне свои товары...\"" +
            $"\n{Shop.CommandBuy} - \"хочу кое-что прикупить...\"" +
            $"\n{Shop.CommandShowPlayerInventory} - посмотреть свой инвентарь..." +
            $"\n{Shop.CommandLeave} - \"извини, до следующего раза\"";

            Console.WriteLine(_commandOptions);

            do
            {
                Console.Write("\nВыберите одно из действий выше: ");
                playerInput = Console.ReadLine();
            }
            while (playerInput != Shop.CommandShowItems && playerInput != Shop.CommandBuy
            && playerInput != Shop.CommandLeave && playerInput != Shop.CommandShowPlayerInventory);

            return playerInput;
        }

        public void Pay(int deductedAmount)
        {
            Money -= deductedAmount;
        }

        public void AddItem(Item addedItem, int addedAmount)
        {
            Inventory.AddItem(addedItem, addedAmount);
        }

        public bool IsEnoughMoney(int price, int desiredQuantity)
        {
            bool isEnoughMoney;

            if (price * desiredQuantity > Money)
            {
                isEnoughMoney = false;
            }
            else
            {
                isEnoughMoney = true;
            }

            return isEnoughMoney;
        }
    }

    class Merchant : Person
    {       
        public Merchant() : base("Торговец Джек", 1500)
        {
            AddInitialItems();
        }

        public void IntroduceYourself()
        {
            Console.WriteLine($"{Name}: \"Добро пожаловать в наш магазин!\"");
            Console.WriteLine($"{Name}: \"Меня зовут {Name}.\"");
            Console.WriteLine($"{Name}: \"Чем я могу Вам помочь?\"");
        }

        public void ShowSalesPrices()
        {
            int itemsCount = 1;
            Console.WriteLine();

            foreach (var stack in Inventory.ReturnStacks())
            {
                Console.WriteLine($"{itemsCount}) {stack.ItemName.Name} x {stack.ItemsCount} шт. по {stack.ItemName.Price} золотых монет");
                itemsCount++;
            }
        }

        public void EnquireDesiredItem(out Item desiredItem, out int desiredQuantity)
        {
            int itemNumber;
            List<Stack> merchantInventory = Inventory.ReturnStacks();

            Console.Write($"\n{Name}: \"Что именно вам нужно?\" (укажите номер) - ");

            while (int.TryParse(Console.ReadLine(), out itemNumber) == false || itemNumber <= 0
                || itemNumber > merchantInventory.Count)
            {
                Console.Write($"\n{Name}: \"Не понял вас. Что именно вам нужно?\" (укажите номер) - ");
            }

            desiredItem = merchantInventory[itemNumber - 1].ItemName;
            Console.Write($"\n{Name}: \"Сколько вам нужно?\" - ");

            while (int.TryParse(Console.ReadLine(), out desiredQuantity) == false || desiredQuantity <= 0 
                || desiredQuantity > merchantInventory[itemNumber - 1].ItemsCount)
            {
                if (desiredQuantity > merchantInventory[itemNumber - 1].ItemsCount)
                {
                    Console.Write($"\n{Name}: \"У меня не хватает товара!\"");
                    Console.Write($"\n{Name}: \"Укажите меньшее количество\" - ");
                }
                else 
                {
                    Console.Write($"\n{Name}: \"Не понял вас. Сколько вам нужно?\" - ");
                }    
            }
        }

        public void RemoveItem(Item removedItem, int removedQuantity) 
        {
            Inventory.RemoveItem(removedItem, removedQuantity);
        }

        public void AddMoney(int addedAmount)
        {
            Money += addedAmount;
        }

        private void AddInitialItems()
        {
            string ironOre = "Железная руда";
            string healingPotion = "Исцеляющее зелье";
            int initialIronOreAmount = 20;
            int initialHealingPositionsAmount = 10;
            int ironOrePrice = 25;
            int healingPotionPrice = 50;

            Inventory.AddNewItem(new Item(ironOre, ironOrePrice), initialIronOreAmount);
            Inventory.AddNewItem(new Item(healingPotion, healingPotionPrice), initialHealingPositionsAmount);
        }
    }

    class Person
    {
        protected Inventory Inventory = new Inventory();

        public Person(string name, int initialMoney)
        {
            Name = name;
            Money = initialMoney;
        }

        public string Name { get; protected set; }
        public int Money { get; protected set; }

        public void ShowInventory()
        {
            Console.WriteLine($"\n{Name}: \"У меня в наличии следующие предметы:\"\n");
            Inventory.ShowStacks();
        }
    }

    class Inventory
    {
        private List<Stack> _stacks = new List<Stack>();

        public void AddNewItem(Item newItem, int quantity)
        {
            _stacks.Add(new Stack(newItem, quantity));
        }

        public void AddItem(Item addedItem, int addedAmount)
        {
            int existingPosition = 0;
            bool isSuccessful = false;

            foreach (var stack in _stacks)
            {
                if (stack.ItemName.Name == addedItem.Name)
                {
                    existingPosition = _stacks.IndexOf(stack);
                    isSuccessful = true;
                    break;
                }
            }

            if (isSuccessful == true)
            {
                _stacks[existingPosition].ChangeItemsCount(addedAmount);
            }
            else
            {
                AddNewItem(addedItem, addedAmount);
            }

            Console.WriteLine("Товар получен!");
        }

        public void RemoveItem(Item removedItem, int removedAmount)
        {
            foreach (var stack in _stacks)
            {
                if (stack.ItemName.Name == removedItem.Name && stack.ItemsCount >= removedAmount)
                {
                    stack.ChangeItemsCount(-removedAmount);
                    break;
                }
            }
        }

        public void ShowStacks()
        {
            int itemsCount = 1;

            foreach (var stack in _stacks)
            {
                Console.WriteLine($"{itemsCount}) {stack.ItemName.Name} x {stack.ItemsCount} шт.");
                itemsCount++;
            }
        }

        public List<Stack> ReturnStacks()
        {
            return _stacks;
        }
    }

    class Stack
    {
        public Stack(Item itemName, int itemsCount)
        {
            ItemName = itemName;
            ItemsCount = itemsCount;
        }

        public Item ItemName { get; private set; }
        public int ItemsCount { get; private set; }

        public void ChangeItemsCount(int change)
        {
            if (ItemsCount + change >= 0)
            {
                ItemsCount += change;
            }
        }
    }

    class Item
    {
        public Item(string name, int price)
        {
            Name = name;
            Price = price;
        }

        public string Name { get; private set; }
        public int Price { get; private set; }
    }
}
