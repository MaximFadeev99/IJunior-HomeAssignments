using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Net.Http.Headers;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace CSTest1
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string CommandShadowSpear = "1";
            const string CommandBlackFireBall = "2";
            const string CommandSummonShadowClone = "3";
            const string CommandShadowCloneStrike = "4";
            const string CommandProtectionDoom = "5";
            const string CommandEscape = "6";

            int playerStartHealth = 900;
            int playerRoundHealth = playerStartHealth;
            int blackFireBallDamage = 100;
            bool burningEffect = false;
            int burningEffectDamage = 50;
            bool protectionDoom = false;
            int protectionDoomEffect = 150;
            bool shadowCloneSpawn = false;
            int shadowCloneDamage = 450;
            int shadowSpearDamage = 100;
            int playerRoundDamage;
            int playerStartDamage = 0;
            int bossStartHealth = 1000;
            int bossRoundHealth = bossStartHealth;
            int bossStartDamage = 200;
            int bossRoundDamage;
            string chosenAction;
            string playerAttackOptions = $"1 - Теневое копье (наносит {shadowSpearDamage} ед. урона)\n" +
            $"2 - Шар черного пламени (наносит {blackFireBallDamage} ед. урона на этом ходу и {burningEffectDamage} ед. урона на следующем ходу от эффекта горения)\n" +
            $"3 - Призыв теневого клона (не наносит урона, позволяет 1 раз выполнить атаку \"Удар теневого клона\")\n" +
            $"4 - Удар теневого клона (наносит {shadowCloneDamage} ед. урона, клон исчезает после атаки)\n" +
            $"5 - Защитный купол (не наносит урона, блокирует входящий урон на текущем ходу, восстанавливает {protectionDoomEffect} ед. здоровья)";
            bool isEscaping = false;
            string escapeOption = $"\n6 - Телепортация (осуществляет тактическое отступление героя в безопасную зону)";

            Console.WriteLine($"Вы выходите на бой с врагом.\n" +
                $"Ваше здоровье - {playerStartHealth} ед.\n" +
                $"Здоровье врага - {bossStartHealth} ед.\n" +
                $"Ответный урон врага - {bossStartDamage} ед.");
            Console.WriteLine();

            while (playerRoundHealth > 0 && bossRoundHealth > 0)
            {
                bossRoundDamage = bossStartDamage;
                playerRoundDamage = playerStartDamage;

                if (burningEffect == true)
                {
                    playerRoundDamage += burningEffectDamage;
                    burningEffect = false;
                }

                ActionOptions:  
     
                if (playerRoundHealth <= 200)
                {
                    isEscaping = true;
                    Console.WriteLine(playerAttackOptions + escapeOption);
                }

                else
                {
                    Console.WriteLine(playerAttackOptions);
                }

                Console.WriteLine();
                Console.Write("Укажите следующее действие:");
                chosenAction = Console.ReadLine();

                switch (chosenAction)
                {
                    case CommandShadowSpear:
                        playerRoundDamage += shadowSpearDamage;
                        break;

                    case CommandBlackFireBall:
                        playerRoundDamage += blackFireBallDamage;
                        burningEffect = true;
                        break;

                    case CommandSummonShadowClone:
                        shadowCloneSpawn = true;
                        break;

                    case CommandShadowCloneStrike:

                        if (shadowCloneSpawn == false)
                        {
                            Console.WriteLine();
                            Console.WriteLine("Действие невозможно, т.к. сначала необходимо выполнить призыв теневого клона");
                            Console.WriteLine();
                            goto ActionOptions;
                        }

                        else
                        {
                            playerRoundDamage += shadowCloneDamage;
                            shadowCloneSpawn = false;
                        }

                        break;

                    case CommandProtectionDoom:
                        protectionDoom = true;
                        playerRoundHealth += protectionDoomEffect;

                        if (playerRoundHealth > playerStartHealth)
                        {
                            playerRoundHealth = playerStartHealth;
                        }

                        break;

                    case CommandEscape:

                        if (isEscaping == false)
                        {
                            Console.WriteLine();
                            Console.WriteLine("Ошибка: неизвестная команда!");
                            Console.WriteLine();
                            goto ActionOptions;
                        }
                        
                        else 
                        {
                            Console.WriteLine();
                            Console.WriteLine("Вы трусливо сбегаете с поля боя! Враг победил!");
                            goto End;
                        }
                        break;

                    default:
                        Console.WriteLine();
                        Console.WriteLine("Ошибка: неизвестная команда!");
                        Console.WriteLine();
                        goto ActionOptions;
                        break;
                }

                if (protectionDoom == true)
                {
                    bossRoundDamage = 0;
                    protectionDoom = false;
                }

                playerRoundHealth -= bossRoundDamage;
                bossRoundHealth -= playerRoundDamage;

                if (playerRoundHealth < 0)
                {
                    playerRoundHealth = 0;
                }

                if (bossRoundHealth < 0)
                {
                    bossRoundHealth = 0;
                }

                Console.WriteLine();
                Console.WriteLine($"Игрок получает {bossRoundDamage} ед. урона, оставшееся здоровье игрока - {playerRoundHealth} ед.");
                Console.WriteLine($"Враг получает {playerRoundDamage} ед. урона, оставшееся здоровье врага - {bossRoundHealth} ед.");
                Console.WriteLine();
            }

            if (playerRoundHealth == 0 && bossRoundHealth == 0)
            {
                Console.WriteLine("Враг повержен, но этот бой стал последним для Вас!");
            }

            else if (playerRoundHealth == 0)
            {
                Console.WriteLine("Вы пали в бою!");
            }

            else if (bossRoundHealth == 0)
            {
                Console.WriteLine("Вы победили!");
            }

            End:
            Console.ReadKey();
        }
    }
}
