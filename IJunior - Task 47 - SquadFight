using System;
using System.Collections.Generic;

namespace CSTest2
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Arena arena = new Arena();

            arena.Work();
        }
    }

    static class RandomNumber
    {
        private static Random _random = new Random();

        public static int ReturnNewNumber(int minValue, int maxValue)
        {
            return _random.Next(minValue, maxValue);
        }
    }

    class Arena
    {
        private Squad _firstSquad = new Squad("Отряд 1");
        private Squad _secondSquad = new Squad("Отряд 2");

        public void Work()
        {
            _firstSquad.ShowInfo();
            _secondSquad.ShowInfo();
            Console.WriteLine("\nНажмите любую клавишу, чтобы начать бой...");
            Console.ReadKey();
            Fight();
            AnnounceWinner();
            Console.ReadKey();
        }

        private void Fight()
        {
            bool isFighting = true;

            while (isFighting == true)
            {
                if (_firstSquad.IsAlive == true && _secondSquad.IsAlive == true)
                {
                    RunRound(_firstSquad, _secondSquad);
                }
                else 
                {
                    isFighting = false;
                }

                if (_firstSquad.IsAlive == true && _secondSquad.IsAlive == true)
                {
                    RunRound(_secondSquad, _firstSquad);
                }
                else
                {
                    isFighting = false;
                }               
            }
        }

        private void RunRound(Squad attackers, Squad defenders)
        {
            defenders.TryTakeCover();
            attackers.Attack(defenders);
            defenders.CountAlive();
            defenders.Heal();
        }

        private void AnnounceWinner()
        {
            if (_firstSquad.IsAlive == false)
            {
                Console.Write($"\nПобеждает {_secondSquad.Name}!\n");
            }
            else if (_secondSquad.IsAlive == false)
            {
                Console.Write($"\nПобеждает {_firstSquad.Name}!\n");
            }

            _firstSquad.ShowInfo();
            _secondSquad.ShowInfo();
        }
    }

    class Squad
    {
        private List<SoldierPrivate> _members = new List<SoldierPrivate>();
        private int _maxMembers = 3;
        private int _aliveMembers;
        private FieldEngineer _fieldEngineer;
        private bool _isTrenchAvailable = false;
        private Medic _medic;

        public Squad(string name)
        {
            Name = name;
            GenerateCurrentMembers();
        }

        public string Name { get; private set; }
        public bool IsAlive { get; private set; } = true;

        public void TryTakeCover()
        {
            if (_isTrenchAvailable == false && _fieldEngineer != null)
            {
                if (_fieldEngineer.TurnsToBuild == 0)
                {
                    Console.WriteLine($"{Name}: {_fieldEngineer.Name} достроил окоп, отряд занимает укрытие.");

                    foreach (var member in _members)
                    {
                        _isTrenchAvailable = true;
                        member.TakeCover();
                    }
                }
            }
        }

        public void Attack(Squad enemySquad)
        {
            Console.WriteLine();

            foreach (var member in _members)
            {
                Console.Write($"{Name}: ");
                member.Attack(enemySquad._members[RandomNumber.ReturnNewNumber(0, (enemySquad._members.Count))]);
            }
        }

        public void Heal()
        {
            if (_medic != null && _medic.CurrentHealth > 0)
            {
                Console.WriteLine();

                foreach (var member in _members)
                {
                    Console.Write($"{Name}: ");
                    member.Heal();
                }
            }
        }

        public void ShowInfo()
        {
            Console.WriteLine($"\n{Name}");
            Console.WriteLine("Класс   -   Здоровье    -    Стартовый урон");

            foreach (var member in _members)
            {
                member.ShowStats();
            }
        }

        public void CountAlive()
        {
            for (int i = _members.Count-1; i >=0; i--) 
            {
                if (_members[i].CurrentHealth == 0)
                {
                    _members.RemoveAt(i);
                    _aliveMembers--;
                }
            }

            if (_aliveMembers == 0)
                IsAlive = false;
        }

        private void GenerateCurrentMembers()
        {
            List<SoldierPrivate> possibleMembers = new List<SoldierPrivate>
            {new SoldierPrivate(),
             new Sergeant(),
             new FieldEngineer(),
             new Medic(),
             new Sniper(),
             new Armored()};
            int randomPosition = RandomNumber.ReturnNewNumber(0, possibleMembers.Count);

            for (int i = 1; i <= _maxMembers; i++)
            {
                while (_members.Contains(possibleMembers[randomPosition]) == true)
                {
                    randomPosition = RandomNumber.ReturnNewNumber(0, possibleMembers.Count);
                }

                _members.Add(possibleMembers[randomPosition]);
            }

            _aliveMembers = _maxMembers;

            foreach (var member in _members)
            {
                if (member is FieldEngineer)
                {
                    _fieldEngineer = (FieldEngineer)member;
                }
                else if (member is Medic)
                {
                    _medic = (Medic)member;
                }
            }
        }
    }

    class SoldierPrivate
    {
        public SoldierPrivate()
        {
            CurrentHealth = MaxHealth;
        }

        public string Name { get; protected set; } = "Рядовой";
        public int MaxHealth { get; protected set; } = 290;
        public int InitialDamage { get; protected set; } = 45;
        public int CurrentDamage { get; protected set; }
        public bool IsInTrench { get; protected set; } = false;
        public int CurrentHealth { get; protected set; }

        public virtual void ShowStats()
        {
            Console.Write($"{Name}    -   {CurrentHealth}      -      {InitialDamage}\n");
        }

        public virtual void Attack(SoldierPrivate enemy)
        {
            CurrentDamage = InitialDamage;
            Console.Write($"{Name} наносит атаку в {CurrentDamage} ед. урона\n");
            enemy.TakeDamage(CurrentDamage);
        }

        public virtual void TakeDamage(int incomingDamage)
        {
            double trenchDamageModifier = 0.1;
            double reducedDamage;

            if (IsInTrench == true)
            {
                reducedDamage = incomingDamage * trenchDamageModifier;
                incomingDamage -= (int)reducedDamage;
            }

            LimitHealthFall(incomingDamage);
            Console.Write($"Вражеский {Name} получает {incomingDamage} ед. урона\n");
            Console.Write($"Оставшееся здоровье - {CurrentHealth}\n");
        }

        public void Heal()
        {
            double healMultiplier = 0.05;
            double restoredHealth = CurrentHealth * healMultiplier;

            if (CurrentHealth + (int)restoredHealth > MaxHealth)
            {
                CurrentHealth = MaxHealth;
                restoredHealth = 0;
            }
            else
            {
                CurrentHealth += (int)restoredHealth;
            }

            Console.WriteLine($"{Name} восстанавливает {(int)restoredHealth} ед. здоровья");
        }

        public void TakeCover()
        {
            IsInTrench = true;
        }

        private void LimitHealthFall(int incomingDamage)
        {
            if (CurrentHealth - incomingDamage < 0)
            {
                CurrentHealth = 0;
            }
            else
            {
                CurrentHealth -= incomingDamage;
            }
        }
    }

    class Sergeant : SoldierPrivate
    {
        private int _turnsToThrowGrenade = 2;
        private int _grenadeDamageMultiplier = 2;

        public Sergeant()
        {
            Name = "Сержант";
            MaxHealth = 310; 
            InitialDamage = 50;
            CurrentHealth = MaxHealth;
        }

        public override void Attack(SoldierPrivate enemy)
        {
            CurrentDamage = InitialDamage;

            if (_turnsToThrowGrenade == 0)
            {
                CurrentDamage *= _grenadeDamageMultiplier;
                Console.Write($"{Name} использует гранату и удваивает урон\n");
                enemy.TakeDamage(CurrentDamage);
                _turnsToThrowGrenade = 2;
            }
            else
            {
                _turnsToThrowGrenade--;
                base.Attack(enemy);
            }
        }
    }

    class FieldEngineer : SoldierPrivate
    {
        public FieldEngineer()
        {
            Name = "Сапер";
            MaxHealth = 400; 
            InitialDamage = 45;
            CurrentHealth = MaxHealth;
        }

        public int TurnsToBuild { get; private set; } = 2;

        public override void Attack(SoldierPrivate enemy)
        {
            if (TurnsToBuild == 0)
            {
                base.Attack(enemy);
            }
            else
            {
                CurrentDamage = 0;
                Console.Write($"{Name} строит окоп\n");
                TurnsToBuild--;
            }
        }
    }

    class Medic : SoldierPrivate
    {
        public Medic()
        {
            Name = "Медик";
            MaxHealth = 290;
            InitialDamage = 35;
            CurrentHealth = MaxHealth;
        }
    }

    class Sniper : SoldierPrivate
    {
        private int _liquidationCount = 2;

        public Sniper()
        {
            Name = "Снайпер";
            MaxHealth = 100;
            InitialDamage = 50;
            CurrentHealth = MaxHealth;
        }

        public override void Attack(SoldierPrivate enemy)
        {
            if (_liquidationCount != 0)
            {
                CurrentDamage = enemy.MaxHealth / 2;
                Console.Write($"{Name} подстреливает вражеский юнит: {enemy.Name}\n");
                Console.Write($"{Name} наносит атаку в {CurrentDamage} ед. урона\n");
                enemy.TakeDamage(CurrentDamage);
                _liquidationCount--;
            }
            else
            {
                base.Attack(enemy);
            }
        }
    }

    class Armored : SoldierPrivate
    {
        private double _incomingDamageModifier = 0.8;

        public Armored()
        {
            Name = "Броник";
            MaxHealth = 300;
            InitialDamage = 45;
            CurrentHealth = MaxHealth;
        }

        public override void TakeDamage(int incomingDamage)
        {
            double reducedDamage = incomingDamage * _incomingDamageModifier;

            base.TakeDamage((int)reducedDamage);
        }
    }
}
