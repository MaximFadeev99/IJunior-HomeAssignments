using System;
using System.Collections.Generic;

namespace CSTest2
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Arena arena = new Arena();

            arena.Work();
        }
    }

    static class RandomNumber
    {
        private static Random _random = new Random();

        public static int ReturnNewNumber(int minValue, int maxValue)
        {
            return _random.Next(minValue, maxValue);
        }
    }

    class Arena
    {
        private Squad _firstSquad = new Squad("Отряд 1");
        private Squad _secondSquad = new Squad("Отряд 2");

        public void Work()  
        {          
            _firstSquad.ShowInfo();
            _secondSquad.ShowInfo();
            Console.WriteLine("\nНажмите любую клавишу, чтобы начать бой...");
            Console.ReadKey();
            Fight();
            AnnounceWinner();
            Console.ReadKey();
        }

        private void Fight()
        {
            while (_firstSquad.isAlive == true || _secondSquad.isAlive == true) 
            {
                RunRound(_firstSquad, _secondSquad);                              

                if (_secondSquad.isAlive == false)
                {
                    break;
                }

                RunRound(_secondSquad, _firstSquad);

                if (_firstSquad.isAlive == false)
                {
                    break;
                }                           
            }
        }

        private void RunRound(Squad attackers, Squad defenders) 
        {
            defenders.TryTakeCover();
            attackers.Attack(defenders);
            defenders.CountAlive();
            defenders.Heal();
        }

        private void AnnounceWinner()
        {
            if (_firstSquad.isAlive == false)
            {
                Console.WriteLine($"\nПобеждает {_secondSquad.Name}!");
            }
            else if (_secondSquad.isAlive == false)
            {
                Console.WriteLine($"\nПобеждает {_firstSquad.Name}!");
            }

            _firstSquad.ShowInfo();
            _secondSquad.ShowInfo();
        }
    }

    class Squad
    {
        private List<SoldierPrivate> _squadMembers = new List<SoldierPrivate>();
        private int _maxMembers = 3;
        private int _aliveMembers;
        private FieldEngineer _fieldEngineer;
        private bool _isTrenchAvailable = false;
        private Medic _medic;

        public Squad(string name)
        {
            Name = name;
            GenerateCurrentMembers();
        }

        public string Name { get; private set; }
        public bool isAlive { get; private set; } = true;       

        public void TryTakeCover ()
        {
            if (_isTrenchAvailable == false && _fieldEngineer != null)
            {
                if (_fieldEngineer.TurnsToBuild == 0)
                {
                    Console.WriteLine($"{Name}: {_fieldEngineer.Name} достроил окоп, отряд занимает укрытие.");

                    foreach (var member in _squadMembers)
                    {
                        _isTrenchAvailable = true;                      
                        member.TakeCover();
                    }
                }
            }
        }   

        public void Attack(Squad enemySquad)
        {
            Console.WriteLine();

            foreach (var member in _squadMembers)
            {
                Console.Write($"{Name}: ");
                member.Attack(enemySquad._squadMembers[RandomNumber.ReturnNewNumber(0, (enemySquad._squadMembers.Count))]);
            }
        }

        public void Heal()
        {
            Console.WriteLine();

            if (_medic != null && _medic.CurrentHealth > 0)
            {
                foreach (var member in _squadMembers)
                {
                    Console.Write($"{Name}: ");
                    member.Heal();
                }
            }
        }

        public void ShowInfo()
        {
            Console.WriteLine($"\n{Name}");
            Console.WriteLine("Класс   -   Здоровье    -    Стартовый урон");

            foreach (var member in _squadMembers)
            {
                member.ShowStats();
            }
        }

        public void CountAlive()
        {
            int positionCount = 0;

            while (positionCount < _squadMembers.Count)
            {
                if (_squadMembers[positionCount].CurrentHealth == 0) 
                {
                    _squadMembers.RemoveAt(positionCount);
                    _aliveMembers--;
                }
                
                positionCount++;
            }

            if (_aliveMembers == 0)
                isAlive = false;
        }

        private void GenerateCurrentMembers()
        {
            List<SoldierPrivate> _possibleSquadMembers = new List<SoldierPrivate>
            {new SoldierPrivate(),
             new Sergeant(),
             new FieldEngineer(),
             new Medic(),
             new Sniper(),
             new Armored()};
            int randomPosition = RandomNumber.ReturnNewNumber(0, _possibleSquadMembers.Count);

            for (int i = 1; i <= _maxMembers; i++)
            {
                while (_squadMembers.Contains(_possibleSquadMembers[randomPosition]) == true)
                {
                    randomPosition = RandomNumber.ReturnNewNumber(0, _possibleSquadMembers.Count);
                }

                _squadMembers.Add(_possibleSquadMembers[randomPosition]);
            }

            _aliveMembers = _maxMembers;

            foreach (var member in _squadMembers)
            {
                if (member is FieldEngineer)
                {
                    _fieldEngineer = (FieldEngineer)member;
                }
                else if (member is Medic)
                {
                    _medic = (Medic)member;
                }
            }
        }
    }

    class SoldierPrivate
    {
        public SoldierPrivate() 
        {
            CurrentHealth = MaxHealth;
        }

        public virtual string Name { get; protected set; } = "Рядовой";
        public virtual int MaxHealth { get; protected set; } = 290;
        public virtual int InitialDamage { get; protected set; } = 45;
        public int CurrentDamage { get; protected set; }
        public bool IsInTrench { get; protected set; } = false;
        public int CurrentHealth { get; protected set; }

        public virtual void ShowStats()
        {
            Console.Write($"{Name}    -   {CurrentHealth}      -      {InitialDamage}\n");
        }

        public virtual void Attack(SoldierPrivate enemy)
        {
            CurrentDamage = InitialDamage;
            Console.Write($"{Name} наносит атаку в {CurrentDamage} ед. урона\n");
            enemy.TakeDamage(CurrentDamage);
        }

        public virtual void TakeDamage(int incomingDamage)
        {
            double trenchDamageModifier = 0.1;
            double reducedDamage;
            
            if (IsInTrench == true) 
            {
                reducedDamage = incomingDamage * trenchDamageModifier;
                incomingDamage -= (int)reducedDamage;
            }

            LimitHealthFall(incomingDamage);
            Console.WriteLine($"Вражеский {Name} получает {incomingDamage} ед. урона");
            Console.WriteLine($"Оставшееся здоровье - {CurrentHealth}");
        }

        public void Heal()
        {
            double healMultiplier = 0.05;
            double restoredHealth = CurrentHealth * healMultiplier;

            if (CurrentHealth + (int)restoredHealth > MaxHealth)
            {
                CurrentHealth = MaxHealth;
                restoredHealth = 0;
            }
            else 
            {
                CurrentHealth += (int)restoredHealth;
            }

            Console.WriteLine($"{Name} восстанавливает {(int)restoredHealth} ед. здоровья");
        }

        public void TakeCover() 
        {
            IsInTrench = true;
        }

        private void LimitHealthFall(int incomingDamage) 
        {
            if (CurrentHealth - incomingDamage < 0)
            {
                CurrentHealth = 0;
            }
            else 
            {
                CurrentHealth -= incomingDamage;
            }
        }
    }

    class Sergeant : SoldierPrivate
    {
        private int _turnsToThrowGrenade = 2;
        private int _grenadeDamageMultiplier = 2;

        public override string Name { get; protected set; } = "Сержант";
        public override int MaxHealth { get; protected set; } = 310;
        public override int InitialDamage { get; protected set; } = 50;

        public override void Attack(SoldierPrivate enemy)
        {
            CurrentDamage = InitialDamage;

            if (_turnsToThrowGrenade == 0)
            {
                CurrentDamage *= _grenadeDamageMultiplier;
                Console.Write($"{Name} использует гранату и удваивает урон\n");
                enemy.TakeDamage(CurrentDamage);
                _turnsToThrowGrenade = 2;
            }
            else 
            {
                _turnsToThrowGrenade--;
                base.Attack(enemy);
            }           
        }
    }

    class FieldEngineer : SoldierPrivate
    {
        public int TurnsToBuild { get; protected set; } = 2;
        public override string Name { get; protected set; } = "Сапер";
        public override int MaxHealth { get; protected set; } = 400;
        public override int InitialDamage { get; protected set; } = 45;

        public override void Attack(SoldierPrivate enemy)
        {
            if (TurnsToBuild == 0)
            {
                base.Attack(enemy);
            }
            else
            {
                CurrentDamage = 0;
                Console.Write($"{Name} строит окоп\n");
                TurnsToBuild--;
            }
        }
    }

    class Medic : SoldierPrivate
    {
        public override string Name { get; protected set; } = "Медик";
        public override int MaxHealth { get; protected set; } = 290;
        public override int InitialDamage { get; protected set; } = 35;
    }

    class Sniper : SoldierPrivate
    {
        private int _liquidationCount = 2;
        public override string Name { get; protected set; } = "Снайпер";
        public override int MaxHealth { get; protected set; } = 100;
        public override int InitialDamage { get; protected set; } = 50;

        public override void Attack(SoldierPrivate enemy)
        {
            if (_liquidationCount != 0)
            {
                CurrentDamage = enemy.MaxHealth / 2;
                Console.Write($"{Name} подстреливает вражеский юнит: {enemy.Name}\n");
                Console.Write($"{Name} наносит атаку в {CurrentDamage} ед. урона\n");
                enemy.TakeDamage(CurrentDamage);
                _liquidationCount--;
            }
            else 
            {
                base.Attack(enemy);
            }                      
        }
    }

    class Armored : SoldierPrivate
    {
        private double _incomingDamageModifier = 0.8;

        public override string Name { get; protected set; } = "Броник";
        public override int MaxHealth { get; protected set; } = 300;
        public override int InitialDamage { get; protected set; } = 45;

        public override void TakeDamage(int incomingDamage)
        {
            double reducedDamage = incomingDamage * _incomingDamageModifier;

            base.TakeDamage((int)reducedDamage);
        }
    }
}
