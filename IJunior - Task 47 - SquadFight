using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.Remoting.Messaging;
using static System.Net.Mime.MediaTypeNames;
using System.Xml.Linq;
using System.Security.Principal;
using System.Security.Cryptography.X509Certificates;
using System.Diagnostics;

namespace CSTest2
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Arena arena = new Arena();

            arena.Work();
        }
    }


    static class RandomNumber
    {
        private static Random _random = new Random();

        public static int ReturnNewNumber(int minValue, int maxValue)
        {
            return _random.Next(minValue, maxValue);
        }
    }

    class Arena 
    {
        Squad firstSquad = new Squad("Отряд 1");
        Squad secondSquad = new Squad("Отряд 2");

        public void Work()  //добавить отключение отхила, если медик мертв 
        {
            bool isOpen = true;

            while (isOpen == true) 
            {
                firstSquad.ShowInfo();
                secondSquad.ShowInfo();
                Console.WriteLine("\nНажмите любую клавишу, чтобы начать бой...");
                Console.ReadKey();
                AnnounceWinner(Fight());
            }     
        }

        private Squad Fight()
        {
            Squad winner = new Squad("Отряд 3");
            
            while (firstSquad.isAlive == true || secondSquad.isAlive == true) //попробовать заменить на бесконечный тру
            {
                firstSquad.TakeCover();
                secondSquad.TakeCover();
                firstSquad.Attack(secondSquad);

                if (secondSquad.CountDead() == secondSquad.MaxMembers) 
                {
                    winner = firstSquad;
                    return winner;
                }

                secondSquad.Attack(firstSquad);

                if (firstSquad.CountDead() == firstSquad.MaxMembers) 
                {
                    winner = secondSquad;
                    return winner;
                }

                firstSquad.Heal();
                secondSquad.Heal(); 
            }

            return winner;

        }

        private void AnnounceWinner(Squad winner) 
        {
            Console.WriteLine($"\n Побеждает {winner.Name}!");
        }
    }

    class Squad 
    {
        private List<SoldierPrivate> _squadMembers = new List<SoldierPrivate>();
        public bool IsTrenchAvailable { get; private set; } = false;
        public string Name { get; private set; }
        public bool isAlive { get; private set; } = true;
        public int MaxMembers { get; private set; } = 3;
        private bool _isFieldEngineerAvailable = false;
        private bool _isMedicAvailable = false;

        public Squad(string name) 
        {
            Name = name;
            GenerateCurrentMembers();
        }

        private void GenerateCurrentMembers() 
        {
            List<SoldierPrivate> _possibleSquadMembers = new List<SoldierPrivate> 
               {new SoldierPrivate(), 
                new Sergeant(),
                new FieldEngineer(),
                new Medic(), 
                new Sniper(), 
                new Armored()};

            int randomPosition = RandomNumber.ReturnNewNumber(0, _possibleSquadMembers.Count);
            int medicPosition = 3;
            int fieldEngineerPosition = 2;

            for (int i = 1; i <= MaxMembers; i++) 
            {
                
                while (_squadMembers.Contains(_possibleSquadMembers[randomPosition]) == true) 
                {
                    randomPosition = RandomNumber.ReturnNewNumber(0, _possibleSquadMembers.Count);
                }

                _squadMembers.Add(_possibleSquadMembers[randomPosition]);
            }

            if (_squadMembers.Contains(_possibleSquadMembers[medicPosition])) 
                _isMedicAvailable = true;

            if (_squadMembers.Contains(_possibleSquadMembers[fieldEngineerPosition]))
                _isFieldEngineerAvailable = true;
        }

        public void TakeCover() 
        {
            int turnsToBuildTrench = 2;

            if (_isFieldEngineerAvailable == true && turnsToBuildTrench == 0)
            {
                IsTrenchAvailable = true;
                Console.WriteLine($"Сапер закончил строительство окопа! {Name} занимает укрытие!");
            }
            else 
            {
                turnsToBuildTrench--;
            }
        }

        public void Attack(Squad enemySquad) 
        {
            Console.WriteLine();
            
            foreach (var member in _squadMembers) 
            {
                if (enemySquad.IsTrenchAvailable == true) 
                {
                    member.ActivateAttackDebuff();
                }

                Console.Write($"{Name}: ");
                member.Attack(_squadMembers[RandomNumber.ReturnNewNumber(0, MaxMembers)]);
            }
        }

        public void Heal() 
        {
            if (_isMedicAvailable == true) 
            {
                foreach (var member in _squadMembers) 
                {
                    Console.Write($"{Name}: ");
                    member.Heal();
                }
            }
        }

        public void ShowInfo() 
        {
            Console.WriteLine($"\n{Name}");
            Console.WriteLine("Класс     -     Здоровье      -      Стартовый урон");
            foreach (var member in _squadMembers) 
            {
                member.ShowStats();
            }
        }

        public int CountDead() 
        {
            int deathToll = 0;
            
            foreach (var member in _squadMembers) 
            {
                if (member.Health == 0) 
                    deathToll++;
            }

            if (deathToll == MaxMembers) 
            {
                isAlive = false;
            }

            return deathToll;
        }
    }

    class SoldierPrivate 
    {
        public virtual string Name { get; protected set; } = "Рядовой";
        public virtual int Health { get; protected set; } = 290;
        public virtual int InitialDamage { get; protected set; } = 45;
        public virtual int CurrentDamage { get; protected set; }

        public virtual void ShowStats()
        {
            Console.Write($"{Name}      -     {Health}      -      {InitialDamage}\n");
        }

        public virtual void Attack(SoldierPrivate enemy)
        {
            Console.Write($"{Name} наносит атаку в {CurrentDamage} ед. урона\n");
            enemy.TakeDamage(CurrentDamage);
        }

        public virtual void TakeDamage(int incomingDamage)
        {
            Health -= incomingDamage;
            Console.WriteLine($"\n Вражеский {Name} получает {incomingDamage} ед. урона");
            Health = LimitHealthFall(Health);
            Console.WriteLine($"Оставшееся здоровье - {Health}");
        }

        protected int LimitHealthFall(int currentHealth)
        {
            if (currentHealth < 0)
            {
                currentHealth = 0;
            }

            return currentHealth;
        }

        public void ActivateAttackDebuff() 
        {
            double AttackDebuff = 0.2;
            double reducedDamage = InitialDamage * AttackDebuff;

            InitialDamage -= (int)reducedDamage;
        }

        public void Heal() 
        {
            double healMultiplier = 0.2;
            double restoredHealth = Health * healMultiplier;

            Health += (int)restoredHealth;
            Console.WriteLine($"{Name} восстанавливает {restoredHealth} ед. здоровья");
        }
    }

    class Sergeant : SoldierPrivate
    {
        private int _throwGrenadeCount = 2;
        private int _initialDamage = 50;

        public override string Name { get; protected set; } = "Сержант";
        public override int Health { get; protected set; } = 310;
        public override int InitialDamage { get; protected set; } = 50;
        public override int CurrentDamage { get; protected set; }

        public override void Attack(SoldierPrivate enemy)
        {
            CurrentDamage = _initialDamage;

            if (_throwGrenadeCount == 0)
            {
                CurrentDamage = ThrowGrenade();
                _throwGrenadeCount = 2;
            }

            Console.Write($"{Name} наносит атаку в {CurrentDamage} ед. урона\n");
            enemy.TakeDamage(CurrentDamage);
        }

        public int ThrowGrenade()
        {
            int damageMultiplier = 2;
            CurrentDamage *= damageMultiplier;
            Console.Write($"{Name} использует гранату и удваивает урон\n");
            return CurrentDamage;
        }
    }

    class FieldEngineer : SoldierPrivate
    {
        private int _turnsToBuild = 2;

        public override string Name { get; protected set; } = "Сапер";
        public override int Health { get; protected set; } = 400;
        public override int InitialDamage { get; protected set; } = 45;
        public override int CurrentDamage { get; protected set; }

        public override void Attack(SoldierPrivate enemy)
        {
            if (_turnsToBuild <= 0)
            {
                CurrentDamage = InitialDamage;
            }
            else
            {
                CurrentDamage = 0;
                Console.Write($"{Name} строит окоп\n");
            }

            Console.Write($"{Name} наносит атаку в {CurrentDamage} ед. урона\n");
            enemy.TakeDamage(CurrentDamage);
        }
    }

    class Medic : SoldierPrivate
    {
        public override string Name { get; protected set; } = "Медик";
        public override int Health { get; protected set; } = 290;
        public override int InitialDamage { get; protected set; } = 35;
        public override int CurrentDamage { get; protected set; }
    }

    class Sniper : SoldierPrivate
    {
        private int _liquidationCount = 1;
        public override string Name { get; protected set; } = "Снайпер";
        public override int Health { get; protected set; } = 100;
        public override int InitialDamage { get; protected set; } = 50;
        public override int CurrentDamage { get; protected set; }

        public override void Attack(SoldierPrivate enemy)
        {
            if (_liquidationCount == 1)
            {
                CurrentDamage = enemy.Health;
                Console.Write($"{Name} устраняет вражеский юнит: {enemy.Name}\n");
            }
            else 
            {
                CurrentDamage = InitialDamage;
                Console.Write($"{Name} наносит атаку в {CurrentDamage} ед. урона\n");
            }

            enemy.TakeDamage(CurrentDamage);
        }
    }

    class Armored : SoldierPrivate
    {
        private double _damageDivisor = 0.5;

        public override string Name { get; protected set; } = "Броник";
        public override int Health { get; protected set; } = 300;
        public override int InitialDamage { get; protected set; } = 45;
        public override int CurrentDamage { get; protected set; }

        public override void TakeDamage(int incomingDamage)
        {
            double reducedDamage = incomingDamage * _damageDivisor;

            incomingDamage -= Convert.ToInt32(reducedDamage);
            Console.WriteLine($"\n Вражеский {Name} получает {incomingDamage} ед. урона");
            Health = LimitHealthFall(Health);
            Console.WriteLine($"Оставшееся здоровье - {Health}");
        }
    }
}
