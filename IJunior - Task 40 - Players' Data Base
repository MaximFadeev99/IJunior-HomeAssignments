using System;
using System.Collections.Generic;

namespace CSTest2
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string CommandAddPlayer = "1";
            const string CommandRemovePlayer = "2";
            const string CommandBanPlayer = "3";
            const string CommandUnbanPlayer = "4";
            const string CommandExit = "5";

            PlayersDataBase  mainDataBase = new PlayersDataBase();
            string commandOptions = $"\n{CommandAddPlayer} - добавить игрока" +
                $"\n{CommandRemovePlayer} - удалить игрока" +
                $"\n{CommandBanPlayer} - забанить игрока" +
                $"\n{CommandUnbanPlayer} - разбанить игрока" +
                $"\n{CommandExit} - выйти из базы данных";
            bool isWorking = true;
            string userInput;
            
            while (isWorking == true) 
            {
                mainDataBase.ShowAllPlayers();
                Console.WriteLine(commandOptions);
                Console.WriteLine();
                Console.Write("Укажите команду:");
                userInput = Console.ReadLine();

                switch (userInput) 
                {
                    case CommandAddPlayer:
                        mainDataBase.AddPlayer();
                        break;

                    case CommandRemovePlayer:
                        mainDataBase.RemovePlayer();
                        break;

                    case CommandBanPlayer:
                        mainDataBase.BanPlayer(userInput);
                        break;

                    case CommandUnbanPlayer:
                        mainDataBase.UnbanPlayer(userInput);
                        break;

                    case CommandExit:
                        isWorking = false;
                        break;

                    default:
                        Console.WriteLine("Неизвестная команда!");
                        break;
                }
                
                Console.ReadKey();
                Console.Clear();
            }            
        }

        class PlayersDataBase
        {
            private List<Player> _playersDataBase = new List<Player>();

            public PlayersDataBase() 
            {
                _playersDataBase.Add(new Player("Лютик"));
                _playersDataBase.Add(new Player("Геральт"));
                _playersDataBase.Add(new Player("Цири"));
                _playersDataBase.Add(new Player("Олаф"));
                _playersDataBase.Add(new Player("Маки"));
            }

            public void ShowAllPlayers() 
            {
                Console.Write("ID - Никнейм - Уровень - Статус аккаунта");

                foreach (Player player in _playersDataBase)
                {                   
                    Console.Write(player.uniqueID + " - " + player.nickName + " - " + player.level + " - ");
                    if (player._isBanned == true)
                    {
                        Console.Write("Забанен");
                    }
                    else 
                    {
                        Console.Write("Активный");
                    }
                    Console.WriteLine();
                }
            }

            public void AddPlayer() 
            {
                string newPlayerName;
                Console.Write("Введите никнейм игрока: ");
                newPlayerName = Console.ReadLine();
                _playersDataBase.Add(new Player(newPlayerName));
                Console.WriteLine("Новый игрок успешно добавлен!");
            }

            public void RemovePlayer()
            {
                EnquirePlayerID(out string playerID);
                _playersDataBase.RemoveAt(GetPosition(_playersDataBase, playerID));
                Console.WriteLine("Игрок успешно удален!");
            }

            public void BanPlayer(string commandNumber)
            {
                EnquirePlayerID(out string playerID);
                _playersDataBase[GetPosition(_playersDataBase, playerID)].ChangeStatus(commandNumber);
                Console.WriteLine("Игрок забанен!");
            }

            public void UnbanPlayer(string commandNumber)
            {
                EnquirePlayerID(out string playerID);
                _playersDataBase[GetPosition(_playersDataBase, playerID)].ChangeStatus(commandNumber);
                Console.WriteLine("Игрок разбанен!");
            }

            public int GetPosition(List<Player> mainList, string playerID)
            {
                int positionInList = 0;
                bool isFound = false;

                while (isFound == false)
                {
                    foreach (var player in mainList)
                    {
                        if (player.uniqueID == playerID)
                        {
                            positionInList = mainList.IndexOf(player);
                            isFound = true;
                            break;
                        }
                    }
                    
                    if (isFound == false)
                    {
                        Console.WriteLine("Ошибка: Игрока с указанным ID номером не существует. Повторите ввод!");
                        EnquirePlayerID(out playerID);
                    }
                }

                return positionInList;
            }

            public void EnquirePlayerID(out string playerID)
            {
                Console.Write("Введите ID игрока: ");
                playerID = Console.ReadLine();
            }
        }

        class Player 
        {
            private static int _playersCount = 0;

            private string _idFixedPart = "plr";

            public Player(string nickName) 
            {
                uniqueID = GenerateNewID();
                this.nickName = nickName;            
            }

            public string uniqueID { get; private set; }
            public string nickName { get; private set; }
            public int level { get; private set; } = 0;
            public bool _isBanned { get; private set; } = false;          

            public string GenerateNewID() 
            {
                string newID;
                newID = _idFixedPart + _playersCount;
                _playersCount++;
                return newID;
            }

            public void ChangeStatus(string commandNumber) 
            {
                string commandBanPlayer = "3";
                string commandUnbanPlayer = "4";

                if (commandNumber == commandBanPlayer) 
                {
                    _isBanned = true;
                }
                else if (commandNumber == commandUnbanPlayer) 
                {
                    _isBanned = false;
                }
            }
        }       
    }
}
