using System;
using System.Collections.Generic;

namespace CSTest2
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string CommandAddPlayer = "1";
            const string CommandRemovePlayer = "2";
            const string CommandBanPlayer = "3";
            const string CommandUnbanPlayer = "4";
            const string CommandExit = "5";

            Database players = new Database();
            string commandOptions = $"\n{CommandAddPlayer} - добавить игрока" +
                $"\n{CommandRemovePlayer} - удалить игрока" +
                $"\n{CommandBanPlayer} - забанить игрока" +
                $"\n{CommandUnbanPlayer} - разбанить игрока" +
                $"\n{CommandExit} - выйти из базы данных";
            bool isWorking = true;
            string userInput;

            while (isWorking == true)
            {
                players.ShowAllPlayers();
                Console.WriteLine(commandOptions);
                Console.WriteLine();
                Console.Write("Укажите команду:");
                userInput = Console.ReadLine();

                switch (userInput)
                {
                    case CommandAddPlayer:
                        players.AddPlayer();
                        break;

                    case CommandRemovePlayer:
                        players.RemovePlayer();
                        break;

                    case CommandBanPlayer:
                        players.BanPlayer();
                        break;

                    case CommandUnbanPlayer:
                        players.UnbanPlayer();
                        break;

                    case CommandExit:
                        isWorking = false;
                        break;

                    default:
                        Console.WriteLine("Неизвестная команда!");
                        break;
                }
               
                Console.Clear();
            }
        }
    }

    class Database
    {
        private List<Player> _players = new List<Player>();

        public Database()
        {
            AddInitialPlayers();
        }

        public void ShowAllPlayers()
        {
            Console.WriteLine("Id - Никнейм - Уровень - Статус аккаунта");

            foreach (Player player in _players)
            {
                Console.Write(player.UniqueId + " - " + player.NickName + " - " + player.Level + " - ");
                if (player.IsBanned == true)
                {
                    Console.Write("Забанен");
                }
                else
                {
                    Console.Write("Активный");
                }
                Console.WriteLine();
            }
        }

        public void AddPlayer()
        {
            string newPlayerName;
            Console.Write("Введите никнейм игрока: ");
            newPlayerName = Console.ReadLine();
            _players.Add(new Player(newPlayerName));
            Console.WriteLine("Новый игрок успешно добавлен!");
            Console.ReadKey();
        }

        public void RemovePlayer()
        {
            Player foundPlayer = TryGetPlayer();

            if (foundPlayer == null)
            {
                Console.WriteLine("Ошибка: Игрока с указанным Id номером не существует!");
            }
            else
            {
                _players.Remove(foundPlayer);
                Console.WriteLine("Игрок успешно удален!");
            }

            Console.ReadKey();
        }

        public void BanPlayer()
        {
            Player foundPlayer = TryGetPlayer();

            if (foundPlayer == null)
            {
                Console.WriteLine("Ошибка: Игрока с указанным Id номером не существует!");
            }
            else
            {
               foundPlayer.Ban();
               Console.WriteLine("Игрок забанен!");
            }

            Console.ReadKey();
        }

        public void UnbanPlayer()
        {
            Player foundPlayer = TryGetPlayer();

            if (foundPlayer == null)
            {
                Console.WriteLine("Ошибка: Игрока с указанным Id номером не существует!");
            }
            else
            {
                foundPlayer.Unban();
                Console.WriteLine("Игрок разбанен!");
            }

            Console.ReadKey();
        }

        private void AddInitialPlayers()
        {
            _players.Add(new Player("Лютик"));
            _players.Add(new Player("Геральт"));
            _players.Add(new Player("Цири"));
            _players.Add(new Player("Олаф"));
            _players.Add(new Player("Маки"));
        }

        private Player TryGetPlayer()
        {
            string playerId;
            Player foundPlayer = null;

            Console.Write("Введите ID игрока: ");
            playerId = Console.ReadLine();
            
            foreach (var player in _players)
            {
                if (player.UniqueId == playerId)
                {
                    foundPlayer = player;
                    break;
                }
            }

            return foundPlayer;           
        }
    }

    class Player
    {
        private static int _playersCount = 0;

        private string _idFixedPart = "plr";

        public Player(string nickName)
        {
            UniqueId = GenerateNewId();
            NickName = nickName;
        }

        public string UniqueId { get; private set; }
        public string NickName { get; private set; }
        public int Level { get; private set; } = 1;
        public bool IsBanned { get; private set; } = false;

        public void Ban()
        {
            IsBanned = true;
        }

        public void Unban()
        {
            IsBanned = false;
        }

        private string GenerateNewId()
        {
            string newId;
            newId = _idFixedPart + _playersCount;
            _playersCount++;
            return newId;
        }       
    }
}
