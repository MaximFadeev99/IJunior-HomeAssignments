using System;
using System.Collections.Generic;

namespace CSTest2
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Supermarket supermarket = new Supermarket();

            supermarket.Work();
        }
    }

    static class RandomNumber
    {
        private static Random _seed = new Random();

        public static int Generate(int minValue, int maxValue)
        {
            int newNumber = _seed.Next(minValue, maxValue);

            return newNumber;
        }
    }

    class Supermarket
    {
        private Queue<Buyer> _buyers = new Queue<Buyer>();
        private List<Product> _products = new List<Product>();
        private int _totalRevenue = 0;

        public Supermarket()
        {
            GenerateProducts();
            GenerateBuyers();
        }

        public void Work()
        {
            while (_buyers.Count != 0)
            {
                Console.WriteLine("Добро пожаловать в систему управления супермаркетом!\n");
                ShowGeneralInfo();
                ServeBuyer();
                Console.Clear();
            }

            Console.WriteLine("Все клиенты обслужены!");
            Console.ReadKey();
        }

        private void GenerateProducts()
        {
            _products.Add(new Product("Сыр", 800));
            _products.Add(new Product("Клубника", 500));
            _products.Add(new Product("Вино", 1200));
        }

        private void GenerateBuyers()
        {
            int minNumber = 5;
            int maxNumber = 21;
            int randomNumber = RandomNumber.Generate(minNumber, maxNumber);

            for (int i = 1; i <= randomNumber; i++)
            {
                _buyers.Enqueue(new Buyer());
            }
        }

        private void ServeBuyer()
        {
            Buyer buyer = new Buyer();
            int revenuePerCheck = CalculateCheckSum(buyer.ChooseProducts(_products));

            while (revenuePerCheck > buyer.Money)
            {               
                revenuePerCheck = CalculateCheckSum(buyer.TakeSomethingOut());
            }

            _buyers.Dequeue().DeductMoney(revenuePerCheck);
            _totalRevenue += revenuePerCheck;
            Console.ReadKey();
        }

        private int CalculateCheckSum(List<Product> chosenProducts)
        {
            int checkSum = 0;

            Console.WriteLine("\n\nТоварный чек клиента:\n");

            foreach (var product in chosenProducts)
            {
                Console.WriteLine(product.Name + " - " + product.Price + " руб.");
                checkSum += product.Price;
            }

            Console.WriteLine($"\nИтого: {checkSum} руб.");
            return checkSum;
        }

        private void ShowGeneralInfo()
        {
            foreach (var product in _products)
            {
                Console.WriteLine($"Цена на позицию: {product.Name} - {product.Price} руб.");
            }

            Console.WriteLine($"\nКлиентов ожидает обслуживания: {_buyers.Count}");
            Console.WriteLine($"Общая выручка магазина: {_totalRevenue}");
        }
    }

    class Buyer
    {
        private List<Product> _productsToBuy = new List<Product>();

        public Buyer()
        {
            int minMoney = 3000;
            int maxMoney = 5000;

            Money = RandomNumber.Generate(minMoney, maxMoney);
        }

        public int Money { get; private set; }

        public List<Product> ChooseProducts(List<Product> availableProducts)
        {
            int minNumber = 1;
            int maxNumber = 8;

            for (int i = 1; i <= RandomNumber.Generate(minNumber, maxNumber); i++)
            {
                _productsToBuy.Add(availableProducts[RandomNumber.Generate(0, availableProducts.Count)]);
            }

            return _productsToBuy;
        }

        public List<Product> TakeSomethingOut()
        {
            int randomPosition = RandomNumber.Generate(0, _productsToBuy.Count);

            Console.WriteLine($"\n\nПокупатель выкладывает позицию: {_productsToBuy[randomPosition].Name}");
            _productsToBuy.Remove(_productsToBuy[randomPosition]);
            return _productsToBuy;
        }

        public void DeductMoney(int deductedAmount)
        {
            Money -= deductedAmount;
        }
    }

    class Product
    {
        public Product(string name, int price)
        {
            Name = name;
            Price = price;
        }

        public string Name { get; protected set; }
        public int Price { get; protected set; }
    }
}
