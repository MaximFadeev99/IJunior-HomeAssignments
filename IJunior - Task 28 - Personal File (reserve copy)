using System;

namespace CSTest2
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string CommandAddEmployee = "1";
            const string CommandShowAllEmployess = "2";
            const string CommandDeleteEmployee = "3";
            const string CommandLastNameSearch = "4";
            const string CommandExit = "5";

            string[] employeeNames = { "Петров Михаил Юрьевич", "Русаков Дмитрий Павлович", "Сидоров Сергей Русланов", "Русаков Степан Васильевич" };
            string[] employeePositions = { "Водитель", "Охранник", "Грузчик", "Водитель" };
            string userInput;
            string commandsList = $"{CommandAddEmployee} - добавить нового сотрудника\n" +
                $"{CommandShowAllEmployess} - показать список всех текущих сотрудников\n" +
                $"{CommandDeleteEmployee} - удалить досье сотрудника\n" +
                $"{CommandLastNameSearch} - поиск сотрудника по фамилии\n" +
                $"{CommandExit} - выйти";
            bool isLeaving = false;

            while (isLeaving == false)
            {
                Console.WriteLine("Добро пожаловать в систему управления кадрами!");
                Console.WriteLine();
                Console.WriteLine(commandsList);
                Console.WriteLine();
                Console.Write("Укажите команду:");
                userInput = Console.ReadLine();

                switch (userInput)
                {
                    case CommandAddEmployee:
                        AddEmployee(ref employeeNames, ref employeePositions);
                        break;

                    case CommandShowAllEmployess:
                        ShowAllEmployees(employeeNames, employeePositions);
                        break;

                    case CommandDeleteEmployee:
                        DeleteEmployee(ref employeeNames, ref employeePositions);
                        break;

                    case CommandLastNameSearch:
                        FindEmployee(employeeNames, employeePositions);
                        break;

                    case CommandExit:
                        isLeaving = true;
                        break;
                }

                Console.ReadKey();
                Console.Clear();
            }
        }

        static void AddEmployee(ref string[] employeeNames, ref string[] employeePositions)
        {
            string fullName;
            string position;

            Console.WriteLine();
            Console.Write("Укажите ФИО нового сотрудника:");
            fullName = Console.ReadLine();
            employeeNames = AddElement(ref employeeNames, fullName);
            Console.Write("Укажите должность нового струдника:");
            position = Console.ReadLine();
            employeePositions = AddElement(ref employeePositions, position);
            Console.Write("Новый сотрудник успешно добавлен!");
        }

        static string[] AddElement(ref string[] targetArray, string newElement)
        {
            string[] tempTargetArray = new string[targetArray.Length + 1];

            for (int i = 0; i < targetArray.Length; i++)
            {
                tempTargetArray[i] = targetArray[i];
            }

            tempTargetArray[tempTargetArray.Length - 1] = newElement;
            return tempTargetArray;
        }

        static void ShowAllEmployees(string[] employeeNames, string[] employeePoistions)
        {
            Console.WriteLine();

            for (int i = 0; i < employeeNames.Length; i++)
            {
                Console.WriteLine(i + 1 + ") " + employeeNames[i] + " - " + employeePoistions[i]);
            }
        }

        static void FindEmployee(string[] employeeNames, string[] employeePositions)
        {
            string lastName;
            bool isFound = false;
            char delimiter = ' ';

            Console.WriteLine();
            Console.Write("Укажите фамилию для поиска сотрудника:");
            lastName = Console.ReadLine().ToLower();

            for (int i = 0; i < employeeNames.Length; i++)
            {
                if (employeeNames[i].Split(delimiter)[0].ToLower() == lastName)
                {
                    isFound = true;
                    Console.WriteLine("Сотрудник найден: " + (i + 1) + ") " + employeeNames[i] + " - " + employeePositions[i]);
                }
            }

            if (isFound == false)
            {
                Console.Write("Сотрудник не найден.");
            }
        }

        static void DeleteEmployee(ref string[] employeeNames, ref string[] employeePositions)
        {
            string userInput;
            string abortion = "отмена";

            ShowAllEmployees(employeeNames, employeePositions);
            Console.WriteLine();
            Console.Write($"Введите номер сотрудника для удаления, или \"{abortion}\", чтобы отменить удаление:");
            userInput = Console.ReadLine();
            
        userInputCheck:
            if (userInput != abortion)                
            {
                if (int.TryParse(userInput, out int rowIndex) == false || rowIndex < 1 || rowIndex > employeeNames.Length)                   
                {
                    Console.WriteLine();
                    Console.WriteLine("Ошибка! Неверный ввод данных!");
                    Console.Write($"Введите номер сотрудника для удаления, или \"{abortion}\", чтобы отменить удаление:");
                    userInput = Console.ReadLine();
                    goto userInputCheck;
                }               

                rowIndex = Convert.ToInt32(userInput) - 1;
                employeeNames = RemoveElement(ref employeeNames, rowIndex);
                employeePositions = RemoveElement(ref employeePositions, rowIndex);
                Console.Write("Сотрудник удален.");
            }
        }

        static string[] RemoveElement(ref string[] targetArray, int targetRow)
        {
            string[] tempTargetArray = new string[targetArray.Length - 1];

            for (int i = 0; i < targetRow; i++)
            {
                tempTargetArray[i] = targetArray[i];
            }

            for (int i = targetRow; i < tempTargetArray.Length; i++)
            {
                tempTargetArray[i] = targetArray[i + 1];
            }

            return tempTargetArray;
        }
    }
}
