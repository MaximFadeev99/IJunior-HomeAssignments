using System;
using System.Collections.Generic;

namespace CSTest2
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string CommandTakeCard = "1";
            const string CommandShowCards = "2";
            const string CommandExit = "3";
            
            PackOfCards packOfCards = new PackOfCards();
            Player player1 = new Player();
            string showCommands = $"{CommandTakeCard} - взять карту" +
                $"\n{CommandShowCards} - показать все карты" +
                $"\n{CommandExit} - выйти";
            string userInput;
            bool isLeaving = false;

            while (!isLeaving)
            {
                Console.WriteLine(showCommands);
                Console.WriteLine($"\nКоличество карт на руках: {player1.CardsAtDisposal} / {Player.maxCards}");
                Console.Write("\nУкажите команду:");
                userInput = Console.ReadLine();

                switch (userInput)
                {
                    case CommandTakeCard:
                        player1.TakeAnotherCard(packOfCards);
                        break;

                    case CommandShowCards:
                        player1.ShowPlayerCards(packOfCards);
                        break;

                    case CommandExit:
                        isLeaving = true;
                        break;

                    default:
                        Console.WriteLine("Ошибка: неизвестная команда!");
                        break;
                }

                Console.Clear();
            }
        }      
    }

    class Player
    {
        public const int maxCards = 5;

        private List<Card> _playerCards = new List<Card>();

        public int CardsAtDisposal { get; private set; } = 0;

        public void TakeAnotherCard(PackOfCards packOfCards)
        {
            if (CardsAtDisposal < maxCards)
            {
                _playerCards.Add(packOfCards.ChooseRandomCard());
                CardsAtDisposal++;
            }
            else 
            {
                Console.WriteLine("У Вас на руках максимальное количетсво карт! Взять еще одну невозможно!");
                Console.ReadKey();
            }
        }

        public void ShowPlayerCards(PackOfCards packOfCards)
        {

            if (CardsAtDisposal != 0)
            {
                Console.WriteLine("\nВам выпали следующие карты:");

                foreach (var card in _playerCards)
                {
                    Console.WriteLine(card.CardNumber + " " + card.CardSuit);
                }
            }
            else 
            {
                Console.WriteLine("Вы не взяли ни одной карты!");
            }

            Console.ReadKey ();
        }
    }

    class PackOfCards
    {
        private const int maxCardsInPack = 51; 

        public PackOfCards()
        {
            while (_packOfCards.Count <= maxCardsInPack) 
            {
                _packOfCards.Add(new Card());
            }
        }

        public List<Card> _packOfCards { get; private set; } = new List<Card>();

        public Card ChooseRandomCard() 
        {
            Random random = new Random();
            Card randomCard = new Card();

            while (randomCard.IsAvailable != true) 
            {
                randomCard = _packOfCards[random.Next(0, _packOfCards.Count)];
            }

            randomCard.MakeCardUnavailable();
            return randomCard;
        }        
    }

    class Card
    {
        private const string Spades = "Пики";
        private const string Hearts = "Черви";
        private const string Diamonds = "Бубны";
        private const string Clubs = "Трефы";
        private const int maxCardsInOneSuit = 13;

        private static int SpadesCount = 1;
        private static int HeartsCount = 1;
        private static int DiamondsCount = 1;
        private static int ClubsCount = 1;


        public Card()
        {
            GenerateCard(out int cardNumber, out string cardSuit, out bool isAvailable);
            CardNumber = cardNumber;
            CardSuit = cardSuit;
            IsAvailable = isAvailable;
        }

        public int CardNumber { get; private set; }
        public string CardSuit { get; private set; }
        public bool IsAvailable { get; private set; }

        private void GenerateCard(out int cardNumber, out string cardSuit, out bool isAvailable) 
        {
            cardNumber = 0;
            cardSuit = string.Empty;
            isAvailable = false;

            if (SpadesCount <= maxCardsInOneSuit)
            {
                cardSuit = Spades;
                cardNumber = SpadesCount;
                isAvailable = true;
                SpadesCount++;
            }
            else if (HeartsCount <= maxCardsInOneSuit) 
            {
                cardSuit = Hearts;
                cardNumber = HeartsCount;
                isAvailable = true;
                HeartsCount++;
            }
            else if (DiamondsCount <= maxCardsInOneSuit)
            {
                cardSuit = Diamonds;
                cardNumber = DiamondsCount;
                isAvailable = true;
                DiamondsCount++;
            }
            else if (ClubsCount <= maxCardsInOneSuit)
            {
                cardSuit = Clubs;
                cardNumber = ClubsCount;
                isAvailable = true;
                ClubsCount++;
            }
        }

        public void MakeCardUnavailable() 
        {
            IsAvailable = false;
        }
    }
}
