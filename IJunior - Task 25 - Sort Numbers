using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace CSTest1
{
    internal class Program
    {
        static void Main(string[] args)
        {
          Random random = new Random();
            int maxNumber = 1000;
            int arrayLength = 10;
            int[] randomNumbers = new int[arrayLength];
            int minNumber = maxNumber;
            int arrayCompletionCount = 1;
            int rearrangeNumberPosition;
            int vacantCell;
            int potentialMinNumber;

            Console.Write("Список рандомных чисел до сортировки:");

            for (int i = 0; i < arrayLength; i++)
            {
               randomNumbers[i] = random.Next(maxNumber);
               Console.Write(randomNumbers[i] + " ");
            }

            Console.WriteLine();
            Console.WriteLine("Нажмите любую клавишу, чтобы отсортировать цифры от меньшего к большему...");
            Console.ReadKey();
            Console.WriteLine();
            Console.Write("Список отсортированных чисел:");

            for (int i = 1;  i < arrayLength; i++)
            {
                for (int j = 0; j < randomNumbers.Length - 1; j++)
                {

                    if (randomNumbers[j] > randomNumbers[j + 1])
                    {
                        potentialMinNumber = randomNumbers[j + 1];
                    }
                    else 
                    {
                        potentialMinNumber = randomNumbers[j];
                    }

                    if (potentialMinNumber < minNumber) 
                    {
                        minNumber = potentialMinNumber;
                    }
                }

                Console.Write(minNumber + " ");
                int[] tempRandomNumbers = new int[randomNumbers.Length - 1];
                rearrangeNumberPosition = 0;
                vacantCell = 0;

                while (arrayCompletionCount <= tempRandomNumbers.Length) 
                {                  
                    if (randomNumbers[rearrangeNumberPosition] != minNumber) 
                    {
                        tempRandomNumbers[vacantCell] = randomNumbers[rearrangeNumberPosition];
                        vacantCell++;
                        arrayCompletionCount++;
                    }

                    rearrangeNumberPosition++;
                }

                minNumber = maxNumber;
                arrayCompletionCount = 1;
                randomNumbers = tempRandomNumbers;
            }

            Console.Write(randomNumbers[randomNumbers.Length -1]);
            Console.ReadKey();
        }
    }
}
