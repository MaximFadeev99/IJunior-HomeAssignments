using System;
using System.Collections.Generic;

namespace CSTest2
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Arena arena = new Arena();

            arena.Work();
        }
    }

    abstract class Champion
    {
        private int _health;

        public Champion(string name, int health, int armor, int damage, int initiative)
        {
            Name = name;
            Health = health;
            Armor = armor;
            Damage = damage;
            Initiative = initiative;
        }

        public string Name { get; private set; }
        public int Armor { get; private set; }
        public int Damage { get; protected set; }
        public int Initiative { get; private set; }

        public int Health
        {
            get { return _health; }

            protected set 
            {
                if (value < 0)
                {
                    _health = 0;
                    return;
                }
                else 
                {
                    _health = value;
                    return;
                }                                      
            }
        }

        public void ShowStats()
        {
            Console.Write($"{Name}      -     {Health}      -      {Armor}     -     {Damage}     -     {Initiative}\n");
        }

        public virtual void Attack(Champion enemy)
        {
            Console.WriteLine($"\n{Name} наносит атаку в {Damage} ед. урона");
            enemy.TakeDamage(Damage);
        }

        public virtual void TakeDamage(int incomingDamage)
        {
            Health -= incomingDamage;
            Console.WriteLine($"\n{Name} получает {incomingDamage} ед. урона");
            Console.WriteLine($"Оставшееся здоровье - {Health}");
        }

        protected bool TryUseSpecialAbility()
        {
            int successThreshold = 33;
            int useChance = RandomNumber.GeneratePercent();

            return useChance <= successThreshold;
        }
    }

    class LightFighter : Champion
    {
        public LightFighter() : base("Дрыщ", 300, 0, 50, 80) { }

        public override void TakeDamage(int incomingDamage)
        {
            if (TryUseSpecialAbility() == false)
            {
                base.TakeDamage(incomingDamage);
            }
            else
            {
                incomingDamage = 0;
                base.TakeDamage(incomingDamage);
            }
        }
    }

    class MediumFighter : Champion
    {
        public MediumFighter() : base("Крепыш", 350, 0, 55, 60) { }

        public override void TakeDamage(int incomingDamage)
        {
            base.TakeDamage(incomingDamage);
            TryHeal();
        }

        private void TryHeal()
        {
            double healPercent = 0.1;
            double restoredHealth;
            int initialHealth = 350;

            if (TryUseSpecialAbility() == true)
            {
                restoredHealth = Health * healPercent;

                if (Health + Convert.ToInt32(restoredHealth) > initialHealth)
                {
                    Health = initialHealth;
                }
                else
                {
                    Health += Convert.ToInt32(restoredHealth);
                }

                Console.WriteLine($"{Name} восстанавливает {Convert.ToInt32(restoredHealth)} о.з.");
            }
        }
    }

    class BackStabber : Champion
    {
        public BackStabber() : base("Крыса", 280, 0, 50, 90) { }

        public override void Attack(Champion enemy)
        {
            int damageMultiplier = 2;
            int initialDamage = 50;

            Damage = initialDamage;

            if (TryUseSpecialAbility() == true)
            {
                Damage *= damageMultiplier;
                Console.WriteLine($"\n{Name} использует заточку и удваивает урон");
            }
            
            base.Attack(enemy);
        }
    }

    class FatGuy : Champion
    {
        public FatGuy() : base("Жиробас", 300, 25, 60, 50) { }

        public override void TakeDamage(int incomingDamage)
        {
            double reducedDamage;
            double maxPercent = 100;

            reducedDamage = incomingDamage * ((maxPercent - Armor) / maxPercent);
            base.TakeDamage((int)reducedDamage);
        }
    }

    class Boxer : Champion
    {
        private int _hitsCount = 0;
        private int _maxHitsCount = 3;
        private double _damageModifier = 1.2;

        public Boxer() : base("Боксер", 270, 0, 55, 55) { }

        public override void Attack(Champion enemy)
        {
            double modifiedDamage;
            int initialDamage = 55;

            if (_hitsCount == _maxHitsCount)
            {
                modifiedDamage = Damage * _damageModifier;
                Damage += Convert.ToInt32(modifiedDamage);
                _hitsCount = 0;
                Console.WriteLine($"\n{Name} бьет коронный и увеличивает урон");
            }
            else
            {
                Damage = initialDamage;
                _hitsCount++;
            }

            base.Attack(enemy);
        }
    }

    class Arena
    {
        private List<Champion> _champions;

        public void Work()
        {
            bool isLeaving = false;

            while (isLeaving == false)
            {
                GenerateNewChampions();
                ChooseChampions(out Champion firstChampion, out Champion secondChampion);

                if (firstChampion.Initiative > secondChampion.Initiative)
                {
                    Fight(firstChampion, secondChampion);
                }
                else
                {
                    Fight(secondChampion, firstChampion);
                }

                AnnounceWinner(firstChampion, secondChampion);
                Console.ReadKey();
                Console.Clear();
            }
        }

        private void GenerateNewChampions()
        {
            _champions = new List<Champion>()
                {new LightFighter(),
                new MediumFighter(),
                new BackStabber(),
                new FatGuy(),
                new Boxer()};
        }

        private void ChooseChampions(out Champion firstChampion, out Champion secondChampion)
        {
            Console.WriteLine("Имя бойца    -   Здоровье    -    Броня   -   " +
            "Урон   -   Инициатива\n");

            for (int i = 0; i < _champions.Count; i++)
            {
                Console.Write(i + 1 + ") ");
                _champions[i].ShowStats();
            }

            firstChampion = EnquireChampionNumber();
            secondChampion = EnquireChampionNumber();

            while (firstChampion == secondChampion)
            {
                Console.Write("Ошибка!Второй боец уже занят!");
                secondChampion = EnquireChampionNumber();
            }
        }

        private Champion EnquireChampionNumber()
        {
            string userInput;
            int championNumber;

            Console.Write("\nВведите номер бойца: ");
            userInput = Console.ReadLine();

            while (int.TryParse(userInput, out championNumber) == false || championNumber - 1 < 0 || championNumber > _champions.Count)
            {
                Console.Write("Ошибка! Введите повторно номер бойца: ");
                userInput = Console.ReadLine();
            }

            return _champions[championNumber - 1];
        }

        private void Fight(Champion attacker, Champion defender) 
        {
            while (attacker.Health > 0 && defender.Health > 0) 
            {
                attacker.Attack(defender);

                if (defender.Health == 0)
                    break;

                defender.Attack(attacker);

                if (attacker.Health == 0)
                    break;
            }                     
        }

        private void AnnounceWinner(Champion firstChampion, Champion secondChampion)
        {
            if (firstChampion.Health == 0)
            {
                Console.WriteLine($"\nПобедил {secondChampion.Name}!");
            }
            else if (secondChampion.Health == 0)
            {
                Console.WriteLine($"\nПобедил {firstChampion.Name}!");
            }
        }
    }

    static class RandomNumber
    {
        private static Random _random = new Random();
        private static int _minValue = 1;
        private static int _maxValue = 101;

        public static int GeneratePercent()
        {
            return _random.Next(_minValue, _maxValue);
        }
    }
}
