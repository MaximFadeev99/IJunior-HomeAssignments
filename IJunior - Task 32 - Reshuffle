using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace CSTest1
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Random random = new Random();
            int[] numbers = new int[10];
            int[] reshuffledNumbers;
            int maxNumber = 100;

            for (int i = 0; i < numbers.Length; i++) 
            {
                numbers[i] = random.Next(maxNumber);
            }

            Reshuffle(numbers, out reshuffledNumbers);
            Console.Write("Изначальный массив:");
            Depict(ref numbers, 0, 1);
            Console.SetCursorPosition(25, 0);
            Console.Write("Измененный массив:");
            Depict(ref reshuffledNumbers, 25, 1);
            Console.ReadKey();
        }

        static int[] Reshuffle(int[] originalArray, out int[] reshuffledArray)
        {
            Random random = new Random();
            int minValue = 1;
            int maxValue = originalArray.Length;
            reshuffledArray = new int [maxValue];
            int[] randomNumbers = new int [maxValue];
            int positionCount;
            int tempVariable;

            for (int i = 0; i < maxValue-1; i++)
            {
                tempVariable = random.Next(minValue, maxValue);

                while (randomNumbers.Contains(tempVariable))
                {
                    tempVariable = random.Next(minValue, maxValue);
                }

                randomNumbers[i] = tempVariable;
            }

            positionCount = 0;

            foreach (var number in randomNumbers)
            {
                reshuffledArray[number] = originalArray[positionCount];
                positionCount++;
            }

            return reshuffledArray;
        }

        static void Depict(ref int[] depictedArray, int cursorPositionX, int cursorPositionY)
        {
            Console.SetCursorPosition(cursorPositionX, cursorPositionY);

            for (int i = 0; i < depictedArray.Length; i++)
            {
                Console.Write(i + 1 + ") " + depictedArray[i]);
                Console.SetCursorPosition(cursorPositionX, cursorPositionY+i+1);
            }
        }
    }
}
